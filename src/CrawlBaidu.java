/** * @(#)CrawlHelper.java * * SCrawler application * * @author * @version 1.00 2012/12/25 */import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;import java.net.URLEncoder;import java.util.ArrayList;public class CrawlBaidu{    private DataBaseHelper DBHelper = new DataBaseHelper();    private CrawlHelper BaiduHelper = new CrawlHelper();    private static Logger logger = LogManager.getLogger(CrawlBaidu.class.getName());    private ArrayList<City> baiduCityList   = new ArrayList<City>();    private ArrayList<String> costLevelList = new ArrayList<String>();    private String baseUrl    = "http://s.baidu.com";    private String baseWapUrl = "http://waps.baidu.com";    private String baiduUrl;    private String IMG_DIR;    // 消费档次    private String costLevelV1 = "&ph=20";              // 20以下    private String costLevelV2 = "&pl=21&ph=50";        // 21-50    private String costLevelV3 = "&pl=51&ph=80";        // 51-80    private String costLevelV4 = "&pl=81&ph=120";       // 81-120    private String costLevelV5 = "&pl=121&ph=200";      // 121-200    private String costLevelV6 = "&pl=201&ph=10240";    // 200以上    public CrawlBaidu()    {        this.baiduUrl = Config.baiduUrl;        Baidu_creatCostLevelList();    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_creatCostLevelList            Author: Yangzheng       Description: 初始化消费档次列表             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void  Baidu_creatCostLevelList()    {        costLevelList.add(costLevelV1);        costLevelList.add(costLevelV2);        costLevelList.add(costLevelV3);        costLevelList.add(costLevelV4);        costLevelList.add(costLevelV5);        costLevelList.add(costLevelV6);        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopsData            Author: Yangzheng       Description: 百度身边入口函数             Input: NONE            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    public void Baidu_getShopsData()    {        // 获取城市列表// 已经可以从数据库直接读取，稍后改正        Baidu_getCityUrls(baiduCityList);        // 测试北京数据        // Baidu_getBeijingInfo(baiduCityList);        // 获取所有城市的商户数据        Baidu_getAllShops(baiduCityList);        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getBeijingInfo            Author: Yangzheng       Description: 测试北京数据             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getBeijingInfo(ArrayList<City> CityList)    {        City beijingCity = new City();        // 获取城市名和Baidu城市ID        String cityName = "北京市";        int baiduCityID = DBHelper.getBaiduCityIdByName(cityName);        int cityID      = DBHelper.getCityIdByName(cityName);        if (0 != baiduCityID)        {            // 调试使用            System.out.println("=============================================");            System.out.println("获取的城市为: " + cityName + " ID为: " + cityID + " 百度城市ID:" + baiduCityID);            System.out.println("=============================================");            // 保存            beijingCity.setCnName(cityName);            beijingCity.setCityId(cityID);            beijingCity.setBaiduCityId(baiduCityID);            // 保存到城市列表            CityList.add(beijingCity);        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getCityUrls            Author: Yangzheng       Description: 获取百度身边所有城市的入口地址             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getCityUrls(ArrayList<City> CityList)    {        // 与饭桶网不同，百度的基本数据已经抓取完毕，商户网址需要从数据库中取出baidu城市ID        // 自行组合地址        String conditionStr = "/search/?ci=";        String serviceStr   = "&sc=20001&chn=%E7%BE%8E%E9%A3%9F";// 美食        int testCount = 15;        // 获取城市列表首页        try        {            Document baiduCityDoc = BaiduHelper.getWebByJsoupBaidu(baiduUrl);            if (baiduCityDoc == null)            {                System.out.println("注意:获取城市列表失败，可能网络有问题，检查后重新运行该程序.");            }            Elements baiduCityLinks = baiduCityDoc.select("div.list#CityList").select("a");            // 根据百度身边城市列表，得到350个城市的链接            // 这里也可以直接从数据里取到城市数据,但是可能百度的页面会有增减,不过意义不大            for (Element baiduCityLink : baiduCityLinks)            {                City aBaiduCity = new City();                // 获取城市名和Baidu城市ID                String cityName = baiduCityLink.text();                String cityLink = null;                int baiduCityID = DBHelper.getBaiduCityIdByName(cityName);                int cityID      = DBHelper.getCityIdByName(cityName);                if (0 != baiduCityID)                {                    // 组合商户列表的地址                    cityLink = baseUrl + conditionStr + baiduCityID + serviceStr;                }                else                {                    continue;                }                // 调试使用                System.out.println("=============================================");                System.out.println("获取的城市为: " + cityName + " ID为: " + cityID + " 百度城市ID:" + baiduCityID);                System.out.println("组合的网址为:" + cityLink);                System.out.println("=============================================");                // 保存                aBaiduCity.setCnName(cityName);                aBaiduCity.setCityId(cityID);                aBaiduCity.setCityUrl(cityLink);                aBaiduCity.setBaiduCityId(baiduCityID);                // 保存到城市列表                CityList.add(aBaiduCity);                // 测试限制                if (testCount-- < 0)                    break;            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAllShops            Author: Yangzheng       Description: 获取baidu身边所有商户的信息             Input: ArrayList<City> CityList            Output: NONE            Return: VOID           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAllShops(ArrayList<City> CityList)    {        int testCount = 12;        for (City aCity : CityList)        {            // 需要保存未抓取成功的城市/商户            // 抓取一个城市的餐馆数据            Baidu_getACityShops(aCity);            // 创建数据表保存基本信息到数据库            Baidu_saveACityShopsToDB(aCity);            // 保存菜肴图片到数据库            Baidu_getShopDishes(aCity);            if (testCount-- <= 0)                break;        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getACityShops            Author: Yangzheng       Description: 获取一个城市的所有商户数据             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void  Baidu_getACityShops(City aCity)    {        // 需要同时存储区域信息和商圈信息到数据库        // 获取区域信息        System.out.println("\n1.开始获取" + aCity.getCnName() + "的区域信息");        Baidu_getAreaInfos(aCity);        // 获取商圈信息        System.out.println("\n2.开始获取" + aCity.getCnName() + "的商圈信息");        Baidu_getCircleInfos(aCity);        // 获取所有商户的地址        System.out.println("\n3.开始获取" + aCity.getCnName() + "所有商户的网址");        Baidu_getACityShopUrls(aCity);        // 对所有餐馆数据进行抓取并存储        System.out.println("\n4.开始获取" + aCity.getCnName() + "的所有餐馆的信息");        Baidu_getACityShopInfos(aCity);        System.out.println("\nEnd." + aCity.getCnName() + "的餐馆数据的抓取完毕.\n\n\n");        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getACityShopUrls            Author: Yangzheng       Description: 获取该城市下所有商户的入口地址             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getACityShopUrls(City aCity)    {        for (AreaInfo aArea : aCity.getAreaInfoList())        {            System.out.println("抓取的区域为: " + aArea.getAreaCnName());            if (aArea.getCircleInfoList().isEmpty())            {                // 直接抓取区域下的商户连接                System.out.println("\n\n" + aArea.getAreaCnName() + "下不存在商圈,直接抓取区域下商户地址");                Baidu_getShopsInArea(aCity, aArea);            }            else            {                // 抓取商圈下的商户连接                Baidu_getShopsInCircle(aCity, aArea);            }        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopsInCircle            Author: Yangzheng       Description: 抓取商圈下的商户连接             Input: City aCity                    AreaInfo aArea            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getShopsInCircle(City aCity, AreaInfo aArea)    {        for (CircleInfo aCircle : aArea.getCircleInfoList())        {            System.out.println("\n--抓取的商圈为: " + aCircle.getCircleName());            for (String costLevel : costLevelList)            {                // 重新组合地址                int     pageCount = 1;                boolean isNextPageExist = true;                String baseEntryUrl = aCircle.getCircleUrl() + costLevel + "&pn=";                String entryUrl = baseEntryUrl + pageCount;                System.out.println("\n  " + aCircle.getCircleName() + "价格区间: " + costLevel);//"下组合首页地址为: " + entryUrl                // 判断是否还有下个分页，如果有，重复调用页面解析                while ((true == isNextPageExist) && (pageCount <= 50) )                {                    // 测试限制                    //if (aCity.getShopsNum() >= 3)                    //    break;                    // 解析每页中所有的餐馆链接并存储                    System.out.println("\n第" + pageCount + "页地址为: " + entryUrl);                    isNextPageExist = Baidu_getShopUrlsInCirclePage(aCity, aCircle, entryUrl);                    entryUrl = baseEntryUrl + (++pageCount);                }            }            // 测试限制            // if (testCount-- <= 0)            //  break;        }    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopUrlsInCirclePage            Author: Yangzheng       Description: 解析每页中所有的餐馆链接并存储             Input: City aCity                    CircleInfo aCircle                    String aPageUrl            Output: NONE            Return: boolean 是否存在下一页           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private boolean Baidu_getShopUrlsInCirclePage(City aCity, CircleInfo aCircle, String aPageUrl)    {        boolean isNextPageExist = true;        // 完成两个动作，取出餐馆链接，判断是否存在下页的链接        try        {            Document listDoc = BaiduHelper.getWebByJsoupBaidu(aPageUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return false;            }            // 获取本页内的所有餐馆链接 class中的空格不能删掉  注意 jsoup貌似对空格敏感，所以用*=            Elements shopList = listDoc.select("div[class*=seacont bls]").select("a");            // System.out.println("商户连接列表: ");            // System.out.println(shopList);            for (Element shopInfo : shopList)            {                // 测试限制                //if (aCity.getShopsNum() >= 3)                //    break;                ShopInfo aShop = new ShopInfo();                String shopUrl  = shopInfo.attr("href");                String shopCode = shopUrl.substring("/shop/".length(), shopUrl.indexOf('?') - 1);                shopUrl = "http://s.baidu.com/shop/" + shopCode;                String shopName = shopInfo.text();                aShop.setCityId(aCircle.getCityId());                aShop.setAreaId(aCircle.getAreaId());                aShop.setCircleId(aCircle.getCircleId());                aShop.setCnName(shopName);                aShop.setShopCode(shopCode);                aShop.setShopUrl(shopUrl);                System.out.println("取到商户: " + shopName + "    商户代码: " + shopCode);                System.out.println("商户链接: " + shopUrl);                aCity.addAShop(aShop);            }            // 判断是否存在下一页            if (listDoc.select("div[class=page_title c32 bls]").select("a:contains(下一页)").isEmpty())            {                isNextPageExist = false;                System.out.println("该条件下没有餐馆了");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return isNextPageExist;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopsInArea            Author: Yangzheng       Description: 获取一个区域下的商户网址             Input: City aCity                    AreaInfo aArea            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getShopsInArea(City aCity, AreaInfo aArea)    {        System.out.println("\n抓取的区域为: " + aArea.getAreaCnName());        for (String costLevel : costLevelList)        {            // 重新组合地址            int     pageCount = 1;            boolean isNextPageExist = true;            String baseEntryUrl = aArea.getAreaUrl() + costLevel + "&pn=";            String entryUrl = baseEntryUrl + pageCount;            System.out.println("\n  " + aArea.getAreaCnName() + "价格区间: " + costLevel);// + "价格下组合首页地址为: " + entryUrl            // 判断是否还有下个分页，如果有，重复调用页面解析            while ((true == isNextPageExist) && (pageCount <= 50) )            {                // 测试限制                //if (aCity.getShopsNum() >= 100)                //    break;                // 解析每页中所有的餐馆链接并存储                System.out.println("\n第" + pageCount + "页地址为: " + entryUrl);                isNextPageExist = Baidu_getShopUrlsInAreaPage(aCity, aArea, entryUrl);                entryUrl = baseEntryUrl + (++pageCount);            }        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopUrlsInAreaPage            Author: Yangzheng       Description: 获取区域下一页的商户网址             Input: City aCity                    CircleInfo aCircle                    String aPageUrl            Output: NONE            Return: boolean           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private boolean Baidu_getShopUrlsInAreaPage(City aCity, AreaInfo aArea, String aPageUrl)    {        boolean isNextPageExist = true;        // 完成两个动作，取出餐馆链接，判断是否存在下页的链接        try        {            Document listDoc = BaiduHelper.getWebByJsoupBaidu(aPageUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return false;            }            // 获取本页内的所有餐馆链接 class中的空格不能删掉  注意 jsoup貌似对空格敏感，所以用*=            Elements shopList = listDoc.select("div[class*=seacont bls]").select("a");            // System.out.println("商户连接列表: ");            // System.out.println(shopList);            for (Element shopInfo : shopList)            {                ShopInfo aShop = new ShopInfo();                String shopUrl  = shopInfo.attr("href");                String shopCode = shopUrl.substring("/shop/".length(), shopUrl.indexOf('?') - 1);                shopUrl = "http://s.baidu.com/shop/" + shopCode;                String shopName = shopInfo.text();                aShop.setCityId(aCity.getCityId());                aShop.setAreaId(aArea.getAreaId());                aShop.setCnName(shopName);                aShop.setShopCode(shopCode);                aShop.setShopUrl(shopUrl);                System.out.println("取到商户: " + shopName + "    商户代码: " + shopCode);                System.out.println("商户链接: " + shopUrl);                aCity.addAShop(aShop);            }            // 判断是否存在下一页            if (listDoc.select("div[class=page_title c32 bls]").select("a:contains(下一页)").isEmpty())            {                isNextPageExist = false;                System.out.println("该条件下没有餐馆了");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return isNextPageExist;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getACityShopInfos            Author: Yangzheng       Description: 抓取城市下所有商户的数据             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getACityShopInfos(City aCity)    {        // 测试使用，抓取5个餐馆        int testCount = 30;        int shopId = 1;        for (ShopInfo aShop : aCity.getShopList())        {            aShop.setShopId(shopId++);            System.out.println("\n要抓取的商户名为: " + aShop.getCnName() + "  商户ID为: " + aShop.getShopId());            System.out.println("商户的网址为: " + aShop.getShopUrl());            Baidu_getAShopInfo(aCity, aShop);            // 需要维护这个列表，对于没有抓取的商户要重新抓取            //if (testCount-- < 0)            //    break;        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAShopInfo            Author: Yangzheng       Description: 获取一个商户的数据             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAShopInfo(City aCity, ShopInfo aShop)    {        String shopBaseUrl = "http://s.baidu.com/shop/";        try        {            System.out.println("\n----------开始抓取一个商户的数据-------------");            Document shopDoc = BaiduHelper.getWebByJsoupBaidu(aShop.getShopUrl());            System.out.println("商户网址为: " + aShop.getShopUrl());            // 1.找出商户摘要的元素(包括:店名、人均消费)            Element briefIntroduction = shopDoc.select("div[class=content]").select("div[class=txt-content").first();            if (briefIntroduction.hasText())            {                Baidu_getAShopBriefInfo(aCity, aShop, briefIntroduction);            }            // 2.获取推荐菜            Elements recommDishes = shopDoc.select("div[class=recommend-food clearfix]");            if (recommDishes.hasText())            {                System.out.println("有推荐菜");                Baidu_getAShopRecommDishes(aShop, recommDishes);            }            // 3.获取商户菜单            Elements shopMenu = shopDoc.select("div[class=menu clearfix]").select("a");            if (!shopMenu.select("span:contains(菜单)").isEmpty())            {                System.out.println("\n有菜单");                Baidu_getAShopMenuDishes(aShop);            }            System.out.println("\n一个商户的数据抓取完毕");            System.out.println("==================================>>>>>>>>>>>");        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAShopBriefInfo            Author: Yangzheng       Description: 获取一个商户的简介信息             Input: City aCity                    ShopInfo aShop                    Element briefIntroduction            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAShopBriefInfo(City aCity, ShopInfo aShop, Element briefIntroduction)    {        // 1.获取店名        if (briefIntroduction.hasText())        {            // 获取店名            String shopName = briefIntroduction.select("h1[class=left merchant-titleA]").first().text();            aShop.setCnName(shopName);            System.out.println("店名是: " + shopName);            // 获取别名            Elements tinyName = briefIntroduction.select("p[class=other-name]");            if (!tinyName.isEmpty())            {                String shopTinyName = tinyName.first().text().replaceAll("别名：", "");                aShop.setCnTinyName(shopTinyName);                System.out.println("别名是: " + shopTinyName);            }        }        // 2.获取评价        Element comStar = briefIntroduction.select("div[class=opinion clearfix]").select("div[class=point]").first();        if (comStar.hasText())        {            String comStarStr = comStar.text();            System.out.println("综合评级:  " + comStarStr);            aShop.setComprehensiveStar(comStarStr);        }        // 3.获取其他评级信息        Elements otherStars = briefIntroduction.select("ul[class=list clearfix]").select("li");        for (Element infoItem : otherStars)        {            if (!infoItem.select("li:contains(口味)").isEmpty())            {                String tasteStar = infoItem.select("li:contains(口味)").select("span[class=number]").text();                System.out.println("口味评级:  " + tasteStar);                aShop.setTasteStar(tasteStar);            }            if (!infoItem.select("li:contains(服务)").isEmpty())            {                String serviceStar = infoItem.select("li:contains(服务)").select("span[class=number]").text();                System.out.println("服务评级:  " + serviceStar);                aShop.setServiceStar(serviceStar);            }            if (!infoItem.select("li:contains(环境)").isEmpty())            {                String envStar = infoItem.select("li:contains(环境)").select("span[class=number]").text();                System.out.println("环境评级:  " + envStar);                aShop.setEnvironmentStar(envStar);            }        }        // 其他信息        Elements otherInfos = briefIntroduction.select("div[class=text clearfix]").select("dl");        // 4.获取人均消费        Element perConsume = otherInfos.select("span[class=consume-value]").first();        if (perConsume.hasText())        {            String perCostStr = perConsume.text();            // 转换为数字存储            aShop.setPerCost(perCostStr);            System.out.println("人均消费: " + perCostStr);        }        // 5.获取地址        Elements addressItem = otherInfos.select("span[class=addr-text]");        if (!addressItem.isEmpty())        {            String address = addressItem.text().replaceAll("1百", "");            System.out.println("地址:  " + address);            aShop.setAddress(address);        }        // 6.获取百度坐标        if (null != aShop.getAddress())        {            Baidu_getShopShopCoords(aCity, aShop);        }        // 7.获取其他信息        for (Element infoItem : otherInfos)        {            if (!infoItem.select("dl:contains(电话)").isEmpty())            {                String telphone = infoItem.select("dl:contains(电话)").select("span[class=pad-R6px]").text();                System.out.println("电话:  " + telphone);                aShop.setTelephone(telphone);            }            if (!infoItem.select("dl:contains(标签)").isEmpty())            {                String cusineStyle = infoItem.select("dl:contains(标签)").select("a[class=pad-R12px]").text();                System.out.println("菜系:  " + cusineStyle);                aShop.setCuisineStyle(cusineStyle);            }            if (!infoItem.select("dl:contains(营业时间)").isEmpty())            {                String businessHours = infoItem.select("dl:contains(营业时间)").select("div[class=dd-box]").text().replaceAll("1百", "");                System.out.println("营业时间:  " + businessHours);                aShop.setBusinessHours(businessHours);            }            if (!infoItem.select("dl:contains(特色服务)").isEmpty())            {                String characService = infoItem.select("dl:contains(特色服务)").select("div[class=dd-box]").text().replaceAll("1百", "");                System.out.println("特色服务:  " + characService);                aShop.setCharacService(characService);            }        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopShopCoords            Author: Yangzheng       Description:  获取商户坐标             Input: City aCity                    ShopInfo aShopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getShopShopCoords(City aCity, ShopInfo aShopInfo)    {        String apiBaseUrl = "http://api.map.baidu.com/geocoder?address=";        String apiPraKey  = "&output=xml&key=9d4f671d8abe8db9005e534fb9e829b2";        String apiPraCity = "&city=";        String cityName   = aCity.getCnName();        try        {            String searchUrl = apiBaseUrl + URLEncoder.encode(aShopInfo.getAddress(), "UTF-8") +                               apiPraKey + apiPraCity + URLEncoder.encode(cityName, "UTF-8");            System.out.println("坐标查询地址为: " + searchUrl);            Document listDoc = BaiduHelper.getWebByJsoup(searchUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return;            }            String latitude  = listDoc.select("lat").first().text();            String longitude = listDoc.select("lng").first().text();            System.out.println(aShopInfo.getCnName() + "获取坐标成功");            System.out.println("纬度为: " + latitude);            System.out.println("经度为: " + longitude);            System.out.println("\n");            aShopInfo.setbLat(latitude);            aShopInfo.setbLng(longitude);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAShopRecommDishes            Author: Yangzheng       Description: 获取推荐菜             Input: Elements Introduction                    ShopInfo shopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAShopRecommDishes(ShopInfo shopInfo, Elements recommendDishes)    {        //String coustomDishes = "";        String shopDishes = "";        String largePicBaseUrl = "http://hiphotos.baidu.com/view/pic/item/";        int dishId = shopInfo.getShopId() * 1000 + 1;  // 初始菜肴ID        // 获取商户推荐菜        Elements ShopRecommendDishes = recommendDishes.select("dl[class=item-bg]").select("dt").select("a");        if (!ShopRecommendDishes.isEmpty())        {            for (Element ShopRecommendDish : ShopRecommendDishes)            {                Dish aDish = new Dish();                String dishName   = ShopRecommendDish.attr("title");                String dishPicUrl = ShopRecommendDish.select("img").first().attr("src");                String dishPicCode = dishPicUrl.substring(dishPicUrl.indexOf("item/") + 5, dishPicUrl.indexOf(".jpg"));                String dishLargePicUrl = largePicBaseUrl + dishPicCode + ".jpg";                aDish.setDishName(dishName);                aDish.setDishPicCode(dishPicCode);                aDish.setIsRecommendDish(1);                aDish.setDishPicUrl(dishPicUrl);                aDish.setDishLargePicUrl(dishLargePicUrl);                aDish.setDishId(dishId++);                System.out.println("增加该商户一个推荐菜:  " + dishName + "\t\tID: " + aDish.getDishId() + "\t\t图片代码:  " + dishPicCode);                System.out.println("菜肴图片地址: " + dishPicUrl);                System.out.println("菜肴大图地址: " + dishLargePicUrl);                shopInfo.addADish(aDish);                shopDishes = shopDishes + dishName + " ";            }            System.out.println("\n商家推荐菜:" + shopDishes);        }        else        {            ShopRecommendDishes = recommendDishes.select("span[class=item-text]").select("a");            if (!ShopRecommendDishes.isEmpty())            {                for (Element ShopRecommendDish : ShopRecommendDishes)                {                    Dish aDish = new Dish();                    String dishName = ShopRecommendDish.attr("title");                    aDish.setDishName(dishName);                    aDish.setDishId(dishId++);                    System.out.println("增加该商户一个推荐菜(无菜肴图片):  " + dishName + " \tID: " + aDish.getDishId());                    shopInfo.addADish(aDish);                    shopDishes = shopDishes + dishName + " ";                }            }            System.out.println("\n商家推荐菜:" + shopDishes);        }        // 保存推荐菜名        shopInfo.setRecommendDishes(shopDishes);        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAShopMenuDishes            Author: Yangzheng       Description: 获取商户菜单上菜肴             Input: ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAShopMenuDishes(ShopInfo aShop)    {        String baseMenuUrl = "http://s.baidu.com/shop/feature/";        String menuUrl = baseMenuUrl + aShop.getShopCode();        String largePicBaseUrl = "http://hiphotos.baidu.com/view/pic/item/";        int dishId = aShop.getShopId() * 1000 + aShop.getDishList().size() + 1;        try        {            Document menuDoc = BaiduHelper.getWebByJsoupBaidu(menuUrl);            Elements menuList = menuDoc.select("ul[class=menu-list]").select("li[class=item]");            if (!menuList.isEmpty())            {                for (Element menuItem : menuList)                {                    Dish aDish = new Dish();                    String dishName = menuItem.select("div[class=content]").select("h4").select("a").first().text();                    aDish.setDishName(dishName);                    aDish.setDishId(dishId++);                    aDish.setIsRecommendDish(0);                    System.out.println("增加该商户一个菜: " + dishName + "\t\tID: " + aDish.getDishId());                    Elements dishPicItem = menuItem.select("div[class=pic]").select("a");                    if (!dishPicItem.isEmpty())                    {                        String dishPicUrl  = dishPicItem.select("img").first().attr("src");                        String dishPicCode = dishPicUrl.substring(dishPicUrl.indexOf("item/") + 5, dishPicUrl.indexOf(".jpg"));                        String dishLargePicUrl = largePicBaseUrl + dishPicCode + ".jpg";                        aDish.setDishPicCode(dishPicCode);                        aDish.setDishPicUrl(dishPicUrl);                        aDish.setDishLargePicUrl(dishLargePicUrl);                        System.out.println("菜肴图片代码: " + dishPicCode);                        System.out.println("菜肴图片地址: " + dishPicUrl);                        System.out.println("菜肴大图地址: " + dishLargePicUrl);                    }                    aShop.addADish(aDish);                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAreaInfos            Author: Yangzheng       Description: 获取该城市下的区域信息             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAreaInfos(City aCity)    {        int cityId = aCity.getCityId();        int areaId = cityId * 100 + 1;        AreaInfo areaInfos = null;        String searchStr = "http://waps.baidu.com/search/?ci=";        String areaStr   = "&sc=20001&chn=美食&action=more_rn";        String wapStr    = "&bd_page_type=1&pu=sz@224_220";        String baiduAreaUrl = searchStr + aCity.getBaiduCityId() + areaStr + wapStr;        System.out.println("该城市的区域信息地址如下: \n" + baiduAreaUrl);        try        {            Document areaDoc = BaiduHelper.getWebByJsoupBaidu(baiduAreaUrl);            if (null == areaDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements areaList  = areaDoc.select("div[class=seacont bld bgf6]").select("a");            for (Element areaItem  : areaList)            {                String areaName  = areaItem.text();                String areaUrl   = baseWapUrl + areaItem.attr("href");                String areaCode  = areaUrl.substring(areaUrl.indexOf("&rc") + 4, areaUrl.indexOf("&rn"));                areaInfos = new AreaInfo();                areaInfos.setCityId(cityId);            // 保存城市ID                areaInfos.setAreaId(areaId++);          // 保存区域ID                areaInfos.setAreaUrl(areaUrl);          // 保存区域网址                areaInfos.setAreaCnName(areaName);      // 保存区域名称                areaInfos.setAreaCode(areaCode);        // 保存区域代码                System.out.println(" 区域名称: " + areaName + "\t百度区域代码: " + areaCode + "\t区域ID: " + (areaId - 1));                //System.out.println(" 区域地址: " + areaUrl);                aCity.setAreaInfo(areaInfos);           // 将该区域基本信息保存至城市对象下            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getCircleInfos            Author: Yangzheng       Description: 获取商圈信息             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getCircleInfos(City aCity)    {        for (AreaInfo aArea : aCity.getAreaInfoList())        {            Baidu_getAreaCircleInfos(aCity, aArea);        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getAreaCircleInfos            Author: Yangzheng       Description: 获取一个区域下商圈的信息             Input: AreaInfo aArea            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getAreaCircleInfos(City aCity, AreaInfo aArea)    {        int circleId = aArea.getAreaId() * 100 + 1;        CircleInfo circleInfo = null;        String cityCodeStr = "http://waps.baidu.com/search/?ci=";        String areaCodeStr = "&sc=20001&chn=美食&rc=";        String actionStr   = "&action=more_region";        String wapStr      = "&bd_page_type=1&pu=sz@224_220";        String circleInfoUrl = cityCodeStr + aCity.getBaiduCityId() +                               areaCodeStr + aArea.getAreaCode() + actionStr + wapStr;        try        {            Document circleDoc = BaiduHelper.getWebByJsoupBaidu(circleInfoUrl);            if (null == circleDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements circleList = circleDoc.select("div[class=seacont bld bgf6]").select("a");            if (!circleList.isEmpty())            {                for (Element circleInfoItem : circleList)                {                    circleInfo = new CircleInfo();                    String circleName = circleInfoItem.text();                    String circleUrl  = baseWapUrl + circleInfoItem.attr("href");                    String circleCode = circleUrl.substring(circleUrl.indexOf("&zi") + 4, circleUrl.indexOf("&of"));                    circleInfo.setCityId(aCity.getCityId());        // 保存城市ID                    circleInfo.setAreaId(aArea.getAreaId());        // 保存区域ID                    circleInfo.setCircleId(circleId++);             // 保存商圈ID                    circleInfo.setCircleName(circleName);           // 保存商圈名称                    circleInfo.setCircleCode(circleCode);           // 保存商圈代码                    circleInfo.setCircleUrl(circleUrl);             // 保存商圈网址                    aArea.setCircleInfo(circleInfo);                // 将该商圈基本信息保存至区域对象下                    System.out.println(" 商圈ID: " + circleInfo.getCircleId() + " 商圈名称: " + circleName + " 百度商圈代码:" + circleCode);                    //System.out.println(" 商圈地址: " + circleUrl);                }            }            else            {                System.out.println(aArea.getAreaCnName() + "(区域)下没有商圈划分!");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_getShopDishes            Author: Yangzheng       Description: 获取城市下每个商户的菜肴图片             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_getShopDishes(City aCity)    {        // 测试使用，抓取5个餐馆        int a = 25;        // 获取商户列表        for (ShopInfo aShop : aCity.getShopList())        {            // 下载每个商户logo图片并保存图片            Baidu_saveShopDishImgs(aShop);            // 需要维护这个列表，对于没有抓取的商户要重新抓取            // if (a-- < 0)            // break;        }        // 更新数据库        DBHelper.saveBaiduDishesToMySQL(aCity);        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_saveShopDishImgs            Author: Yangzheng       Description: 下载并保存商户菜肴             Input: ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_saveShopDishImgs(ShopInfo aShop)    {        String dishPath = "/86" + "/" + aShop.getCityId() + "/" + aShop.getAreaId() +                          "/dishes" + "/" + aShop.getShopId();        String dishPicName      = null;        String dishLargePicName = null;        String dishPicUrl       = null;        String dishLargePicUrl  = null;        try        {            for (Dish aDish : aShop.getDishList())            {                dishPicUrl = aDish.getDishPicUrl();                if (null != dishPicUrl)                {                    // 创建图片名                    dishPicName = aDish.getDishId() + "_" + "thumb" + ".jpg";                    // 保存图片的本地路径                    aDish.setDishPicPath(dishPath + "/" + dishPicName);                    // 下载图片并保存                    Baidu_dowloadShopDishImgs(dishPicName, dishPicUrl, dishPath);                }                dishLargePicUrl = aDish.getDishLargePicUrl();                if (null != dishLargePicUrl)                {                    // 创建图片名                    dishLargePicName = aDish.getDishId() + "_" + "large" + ".jpg";                    // 保存图片的本地路径                    aDish.setDishLargePicPath(dishPath + "/" + dishLargePicName);                    // 下载图片并保存                    Baidu_dowloadShopDishImgs(dishLargePicName, dishLargePicUrl, dishPath);                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_dowloadShopDishImgs            Author: Yangzheng       Description: 下载并保存指定菜肴图片             Input: String imgName                    String imgUrl                    String imgPath            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_dowloadShopDishImgs(String imgName, String imgUrl, String imgPath) throws Exception    {        BufferedOutputStream imgOut = null;        try        {            byte[] dishImgBytes = BaiduHelper.getImgByHttpclientGet(imgUrl);            // 保存图片到本地            if (dishImgBytes.length > 0)            {                // 创建文件夹                imgPath = "D:/IMG" + imgPath;                File fileDir = new File(imgPath);                fileDir.mkdirs();                imgOut = new BufferedOutputStream(new FileOutputStream(imgPath + "/" + imgName));                imgOut.write(dishImgBytes);                imgOut.flush();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            if (imgOut != null)            {                imgOut.close();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlBaidu.Baidu_saveACityShopsToDB            Author: Yangzheng       Description: 保存一个城市的商户数据到数据库             Input: aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Baidu_saveACityShopsToDB(City aCity)    {        DBHelper.saveBaiduToMySQL(aCity);        return;    }}