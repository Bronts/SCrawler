/** * @(#)CrawlHelper.java * * SCrawler application * * @author * @version 1.00 2012/12/25 */import org.apache.http.HttpHost;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;import java.net.URLEncoder;import java.util.ArrayList;public class CrawlDianping implements Runnable{    private DataBaseHelper DBHelper    = new DataBaseHelper();    private CrawlHelper DianpingHelper = new CrawlHelper();    private static Logger logger = LogManager.getLogger(CrawlDianping.class.getName());    public static ArrayList<City> dianpingCityList;    private ArrayList<String> costLevelList  = new ArrayList<String>();    private ArrayList<ShopInfo>[] subShopList;    private String baseUrl     = "http://www.dianping.com";     // 主网址    private String baseCityUrl = "http://www.dianping.com/search/category/";    private String baseMWapUrl = "http://m.dianping.com/";    private String baseWapUrl  = "http://waps.dianping.com";    private String dianpingUrl;    private String IMG_DIR;    private boolean bIsContinue = false;        private static boolean bIsNeedStop = false; //运行标志位    private String foodCode    = "/10/g0r0/";                   // "餐饮"类别代码    // 消费档次    private String costLevelV4  = "&price=1";               // 20以下    private String costLevelV5  = "&price=2";               // 21-50    private String costLevelV10 = "&price=3";               // 51-80    private String costLevelV12 = "&price=4";               // 81-120    private String costLevelV2  = "&price=5";               // 121-200    private String costLevelV3  = "&price=6";               // 200以上    public static String initialSize  = "(120c90)";           // 图片尺寸规格    public static String tinySize     = "(139c100)";    public static String smallSize    = "(240c180)";    public static String middleSize   = "(320x480)";    public static String largeSzie    = "(700x700)";    public CrawlDianping(ArrayList<City> cityList, boolean bIsContinue)    {        this.dianpingCityList = cityList;        this.bIsContinue = bIsContinue;        this.dianpingUrl = Config.dianpingUrl;        this.IMG_DIR     = Config.IMG_DIR;        Dianping_creatCostLevelList();    }    public void run()    {        if (bIsContinue)        {            Dianping_getAllShops(dianpingCityList);        }        else        {            // 先获取区域划分信息,这里仅仅获取了城市的信息,其他信息在抓取时获取            Dianping_getCitiesInfo(dianpingCityList);            // 获取所有城市的商户数据            Dianping_getAllShops(dianpingCityList);        }    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getRunningFlag            Author: Yangzheng       Description: 获取运行标志位，用于停止子线程             Input: NONE            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/17       Yangzheng        Created Function    *****************************************************************************/    public boolean Dianping_getRunningFlag()    {        return this.bIsNeedStop;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_setRunningFlag            Author: Yangzheng       Description: 设置运行标志位             Input: boolean bIsNeedStop            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/17       Yangzheng        Created Function    *****************************************************************************/    public void Dianping_setRunningFlag(boolean bIsNeedStop)    {        this.bIsNeedStop = bIsNeedStop;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_creatCostLevelList            Author: Yangzheng       Description: 初始化消费档次列表             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_creatCostLevelList()    {        costLevelList.add(costLevelV4);        costLevelList.add(costLevelV5);        costLevelList.add(costLevelV10);        costLevelList.add(costLevelV12);        costLevelList.add(costLevelV2);        costLevelList.add(costLevelV3);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getCitiesInfo            Author: Yangzheng       Description: 大众身边入口函数             Input: NONE            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    public void Dianping_getCitiesInfo(ArrayList<City> CityList)    {        // 优先抓取北京数据        // Dianping_getBeijingInfo(CityList);        // 添加上海城市基本信息        // Dianping_getShanghaiInfo(CityList);        // 添加天津城市基本信息        Dianping_getTianjinInfo(CityList);        // 获取城市列表        // Dianping_getCityUrls(CityList);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getCityUrls            Author: Yangzheng       Description: 获取大众身边所有城市的入口地址             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getCityUrls(ArrayList<City> CityList)    {        try        {            // 获取城市列表首页            Document cityListDoc = DianpingHelper.getWebByHttpclientDianpingGet(dianpingUrl);            if (cityListDoc == null)            {                System.out.println("注意:获取城市列表失败，可能网络有问题，检查后重新运行该程序.");            }            Elements cityList = cityListDoc.select("div").select("[id]").select("li").select("a");            for (Element cityItem : cityList)            {                String cityName = cityItem.text();                int    cityID   = DBHelper.getCityIdByName(cityName);                if (0 == cityID || 1100 == cityID || 3100 == cityID)                {                    System.out.println(cityName + "已经添加,跳过!");                    continue;                }                if ( 2102 == cityID)                {                    CityList.clear();                    System.out.println(cityName + "之前的城市已经抓取，从" + cityName + "开始抓取.");                }                City aCity = new City();                // 获取城市名和目标网站城市代码                String cityMWapLink = cityItem.attr("href");                int beginIndex = cityMWapLink.indexOf("'/") + 2;                int endIndex   = cityMWapLink.lastIndexOf("'");                if (endIndex > beginIndex)                {                    String cityEnName  = cityMWapLink.substring(beginIndex, endIndex);                    String cityMWapUrl = baseMWapUrl + cityEnName;                    System.out.println(" 城市MWap地址: " + cityMWapUrl);                    Document cityDoc = DianpingHelper.getWebByJsoupDianping(cityMWapUrl);                    Element aCityItem  = cityDoc.select("div[class=classify]").select("a[title=美食]").first();                    String cityWUrl = aCityItem.attr("href");                    String cityCode = cityWUrl.substring(cityWUrl.indexOf("list/") + 5, cityWUrl.indexOf("/d"));                    String cityUrl  = baseCityUrl + cityCode + foodCode;                    System.out.println(" 城市代码: " + cityCode + "\t城市名称: " + cityName + "\t城市ID: " + cityID);                    System.out.println(" 城市网址: " + cityUrl);                    // 保存该城市                    aCity.setCnName(cityName);                    aCity.setEnName(cityEnName);                    aCity.setCityId(cityID);                    aCity.setCityUrl(cityUrl);                    aCity.setDianpingCityId(Integer.parseInt(cityCode));                    // 保存到城市列表                    CityList.add(aCity);                    // 测试限制                    // if (testCount-- < 0)                    //    break;                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getBeijingInfo            Author: Yangzheng       Description: 测试北京数据             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getBeijingInfo(ArrayList<City> CityList)    {        City beijingCity = new City();        // 获取城市名和Dianping城市ID        String cityName   = "北京市";        String cityEnName = "beijing";        String cityUrl    = "http://www.dianping.com/search/category/2/10/g0r0/";        int cityID         = DBHelper.getCityIdByName(cityName);        int dianpingCityID = 2;//DBHelper.getDianpingCityIdByName(cityName);        if (0 != dianpingCityID)        {            // 调试使用            System.out.println("<<<<<<<<<<<<===============================>>>>>>>>>>>");            System.out.println("\n 测试城市为: " + cityName + "\t城市ID为: " + cityID + "\t大众城市ID:" + dianpingCityID);            System.out.println(" 城市网址: " + cityUrl);            // 保存测试城市基本数据            beijingCity.setCnName(cityName);            beijingCity.setEnName(cityEnName);            beijingCity.setCityId(cityID);            beijingCity.setCityUrl(cityUrl);            beijingCity.setDianpingCityId(dianpingCityID);            // 保存到城市列表            CityList.add(beijingCity);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShanghaiInfo            Author: Yangzheng       Description: 构造上海城市信息             Input: ArrayList<City> CityList            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/19       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getShanghaiInfo(ArrayList<City> CityList)    {        City shanghaiCity = new City();        // 获取城市名和Dianping城市ID        String cityName   = "上海市";        String cityEnName = "shanghai";        String cityUrl    = "http://www.dianping.com/search/category/1/10/g0r0/";        int cityID         = DBHelper.getCityIdByName(cityName);        int dianpingCityID = 1;        if (0 != dianpingCityID)        {            // 调试使用            System.out.println("<<<<<<<<<<<<===============================>>>>>>>>>>>");            System.out.println("\n 测试城市为: " + cityName + "\t城市ID为: " + cityID + "\t大众城市ID:" + dianpingCityID);            System.out.println(" 城市网址: " + cityUrl);            // 保存测试城市基本数据            shanghaiCity.setCnName(cityName);            shanghaiCity.setEnName(cityEnName);            shanghaiCity.setCityId(cityID);            shanghaiCity.setCityUrl(cityUrl);            shanghaiCity.setDianpingCityId(dianpingCityID);            // 保存到城市列表            CityList.add(shanghaiCity);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getTianjinInfo            Author: Yangzheng       Description: 添加天津城市信息             Input: ArrayList<City> CityList            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/4/29       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getTianjinInfo(ArrayList<City> CityList)    {        City  tianjinCity = new City();        // 获取城市名和Dianping城市ID        String cityName   = "天津市";        String cityEnName = "tianjin";        String cityUrl    = "http://www.dianping.com/search/category/10/10/g0r0/";        int cityID         = DBHelper.getCityIdByName(cityName);        int dianpingCityID = 10;        if (0 != dianpingCityID)        {            // 调试使用            System.out.println("<<<<<<<<<<<<===============================>>>>>>>>>>>");            System.out.println("\n 测试城市为: " + cityName + "\t城市ID为: " + cityID + "\t大众城市ID:" + dianpingCityID);            System.out.println(" 城市网址: " + cityUrl);            // 保存测试城市基本数据            tianjinCity.setCnName(cityName);            tianjinCity.setEnName(cityEnName);            tianjinCity.setCityId(cityID);            tianjinCity.setCityUrl(cityUrl);            tianjinCity.setDianpingCityId(dianpingCityID);            // 保存到城市列表            CityList.add(tianjinCity);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAllShops            Author: Yangzheng       Description: 获取dianping身边所有商户的信息             Input: ArrayList<City> CityList            Output: NONE            Return: VOID           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAllShops(ArrayList<City> CityList)    {        try        {            for (City aCity : CityList)            {                // 判断该城市是否抓取完毕                if (Config.CITY_CRAWLED == (Config.CITY_CRAWLED & aCity.getCrawledFlag()))                {                    aCity.getShopList().clear();                    System.out.println(aCity.getCnName() + " 已经抓取完毕,跳过");                    continue;                }                // 抓取一个城市的餐馆数据                Dianping_getACityShops(aCity);                // 抓取商户logo                Dianping_getShopsLogos(aCity);                // 抓取商户菜肴图片并存到数据库 test_info                Dianping_getShopDishes(aCity);                // 将该城市标记为已抓取完毕                aCity.setCrawledFlag(Config.CITY_CRAWLED);                System.out.println(aCity.getCnName() + "的数据抓取完毕.");                synchronized (CityList)                {                    aCity.getShopList().clear();                    logger.info(aCity.getCnName() + "抓取完毕保存一次,清空城市下商户列表。");                    InfoSave.SC_savePrcocess(CityList, Config.dianpingDat);                    System.out.println(aCity.getCnName() + " 保存完毕");                }            }            System.out.println(" 所有城市的商户信息已经抓取完毕!");            System.exit(0);            return;        }        catch (Exception ex)        {            ex.printStackTrace();        }    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityShops            Author: Yangzheng       Description: 获取一个城市的所有商户数据             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getACityShops(City aCity)    {        try        {            // 需要同时存储区域信息和商圈信息到数据库            Dianping_getACityRegionsInfo(aCity);            // 获取所有商户的地址            Dianping_getACityShopUrls(aCity);            // 获取代理            Dianping_getProxyList();            // 分配抓取线程            Dianping_distributeCrawlTasks(aCity);            // 多线成对商户数据进行抓取            Dianping_getACityShopsMultiply(aCity);            // 等待抓取子线程结束            Dianping_waitForMultiTaskFinish(aCity);            // 创建数据表保存基本信息到数据库            // 单独把写数据库分离出来了            Dianping_saveACityShopsToDB(aCity);        }        catch (Exception ex)        {            logger.error("抓取一个城市商户时出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityShopsMultiply            Author: YangZheng       Description: 多线程抓取商户信息             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Dianping_getACityShopsMultiply(City aCity)    {        System.out.println("开始抓取商户信息,实际要启动的工作线程数：" + subShopList.length);        // 设置线程进度标志位        aCity.setDishCrawlThreadCount(subShopList.length);        for (int i = 0; i < subShopList.length; i++)        {            System.out.println("<<<<<<=======启动线程 " + i + " 开始下载商户信息========>>>>>>>");            CrawlDianpingShopsInfo crawlDianpingShops = new CrawlDianpingShopsInfo(aCity, subShopList[i]);            Thread crawlShopsThread = new Thread(crawlDianpingShops);            crawlShopsThread.start();            try            {                // 避免同时启动多个线程抓取商户而导致反制措施，间隔一秒启动                Thread.sleep(1000);            }            catch (Exception ex)            {                ex.printStackTrace();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityRegionsInfo            Author: Yangzheng       Description: 抓取区域信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/23       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getACityRegionsInfo(City aCity)    {        // 需要同时存储区域信息和商圈信息到数据库        if (Config.REGIONS_CRAWLED != (Config.REGIONS_CRAWLED & aCity.getCrawledFlag()))        {            // 获取区域信息            System.out.println("\n1.开始获取" + aCity.getCnName() + "的区域信息");            Dianping_getAreaInfos(aCity);            // 获取商圈信息            System.out.println("\n2.开始获取" + aCity.getCnName() + "的商圈信息");            Dianping_getCircleInfos(aCity);            // 运行中保存一次            DBHelper.saveDianpingRegionsToMySQL(aCity);            try            {                synchronized (dianpingCityList)                {                    logger.info("抓取完区域信息，保存一次。");                    InfoSave.SC_savePrcocess(dianpingCityList, Config.dianpingDat);                    System.out.println(" 保存完毕");                }            }            catch (Exception ex)            {                ex.printStackTrace();            }            // 测试抓取数据            // Dianping_testBasicInfos(dianpingCityList);            aCity.setCrawledFlag(Config.REGIONS_CRAWLED);        }        else        {            System.out.println(aCity.getCnName() + "区域信息和商户网址已经抓取,按照保存进度继续信息抓取.");        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityShopUrls            Author: Yangzheng       Description: 获取该城市下所有商户的入口地址             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getACityShopUrls(City aCity)    {        System.out.println("\n3.开始获取" + aCity.getCnName() + "所有商户的网址");        if (Config.SHOPURLS_CRAWLED != (Config.SHOPURLS_CRAWLED & aCity.getCrawledFlag()))        {            for (AreaInfo aArea : aCity.getAreaInfoList())            {                if (aArea.getCircleInfoList().isEmpty() || (1 == aArea.getIsSubArea()))                {                    // 直接抓取区域下的商户连接                    System.out.println("\n\n " + aArea.getAreaCnName() + "下不存在商圈,直接抓取区域下商户地址");                    String regionCode = aArea.getAreaCode().substring(1);                    Dianping_getShopsInRegion(aCity, aArea, null, regionCode);                }                else                {                    for (CircleInfo aCircle : aArea.getCircleInfoList())                    {                        // 抓取商圈下的商户连接                        String regionCode = aCircle.getCircleCode().substring(1);                        Dianping_getShopsInRegion(aCity, aArea, aCircle, regionCode);                    }                }            }            // 运行中保存一次            try            {                synchronized (dianpingCityList)                {                    logger.info("抓取完商户网址，保存一次。");                    InfoSave.SC_savePrcocess(dianpingCityList, Config.dianpingDat);                    System.out.println(" 保存完毕");                }            }            catch (Exception ex)            {                ex.printStackTrace();            }            // 保存商户网址信息已经抓取            aCity.setCrawledFlag(Config.SHOPURLS_CRAWLED);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopsInArea            Author: Yangzheng       Description: 获取一个区域下的商户网址             Input: City aCity                    AreaInfo aArea            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getShopsInRegion(City aCity, AreaInfo aArea, CircleInfo aCircle, String regionCode)    {        int pageCount = 1;        int dianpingCityId = aCity.getDianpingCityId();        String foodPara = "c/10/";        String sortPara = "s/s_-1/";        String pagePara = "p";        int areaId = aArea.getAreaId();        int circleId = 0;        System.out.println("\n 抓取的区域为: " + aArea.getAreaCnName());        if (null != aCircle)        {            circleId = aCircle.getCircleId();            System.out.println("抓取的商圈为: " + aCircle.getCircleName());        }        // 重新组合地址        boolean isNextPageExist = true;        // 地址参考范例        // http://m.dianping.com/shoplist/3/r/1668/c/10/s/s_-1/p2        String baseEntryUrl = baseMWapUrl + "shoplist/" + dianpingCityId + "/r/" + regionCode +                              "/" + foodPara + sortPara + pagePara;        String entryUrl = baseEntryUrl + pageCount;        // 判断是否还有下个分页，如果有，重复调用页面解析        while (isNextPageExist)        {            // 测试限制 test_info            // if (aCity.getShopsNum() >= 50)            //    break;            // 解析每页中所有的餐馆链接并存储            System.out.println("正在抓取的区域为: " + aArea.getAreaCnName());            System.out.println("\n第" + pageCount + "页地址为: " + entryUrl);            isNextPageExist = Dianping_getShopUrlsInAPage(aCity, areaId, circleId, entryUrl);            entryUrl = baseEntryUrl + (++pageCount);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopUrlsInAPage            Author: Yangzheng       Description: 获取区域下一页的商户网址             Input: City aCity                    int areaId                    int circleId                    String aPageUrl            Output: NONE            Return: boolean           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private boolean Dianping_getShopUrlsInAPage(City aCity, int areaId, int circleId, String aPageUrl)    {        boolean isNextPageExist = true;        // 完成两个动作，取出餐馆链接，判断是否存在下页的链接        try        {            Document listDoc = DianpingHelper.getWebByHttpclientDianpingGet(aPageUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return false;            }            Elements shopList = listDoc.select("div[class=shop_list]").select("a");            for (Element shopInfo : shopList)            {                int shopId = aCity.getShopsNum() + 1;                ShopInfo aShop = new ShopInfo();                String shopUrl  = shopInfo.attr("href");                String shopCode = shopUrl.substring(shopUrl.indexOf("shop/") + 5, shopUrl.lastIndexOf("'"));                shopUrl = "http://s.dianping.com/shop/" + shopCode;                String shopName = shopInfo.select("h6").first().text();                aShop.setCityId(aCity.getCityId());                aShop.setAreaId(areaId);                aShop.setCircleId(circleId);                aShop.setCnName(shopName);                aShop.setShopCode(shopCode);                aShop.setShopId(shopId);                aShop.setShopUrl(shopUrl);                System.out.println("取到商户: " + shopName + "\t商户代码: " + shopCode);                System.out.println("商户链接: " + shopUrl);                aCity.addAShop(aShop);            }            // 判断是否存在下一页            if (listDoc.select("div[class=pages-box]").select("a:contains(下一页)").isEmpty())            {                isNextPageExist = false;                System.out.println("该条件下没有餐馆了");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return isNextPageExist;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAreaInfos            Author: Yangzheng       Description: 获取该城市下的区域信息             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAreaInfos(City aCity)    {        int cityId = aCity.getCityId();        int areaId = cityId * 100 + aCity.getAreaInfoList().size() + 1;        AreaInfo areaInfos = null;        String dianpingAreaUrl = aCity.getCityUrl();        System.out.println("该城市的区域信息地址如下: \n" + dianpingAreaUrl);        try        {            Document areaDoc = DianpingHelper.getWebByJsoupDianping(dianpingAreaUrl);            if (null == areaDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements areaList  = areaDoc.select("ul[class=navBlock navTab-cont navTab-cont-on]").select("a");            for (Element areaItem  : areaList)            {                String areaName  = areaItem.text().substring(0, areaItem.text().indexOf("(") - 1);                String areaUrl   = baseUrl + areaItem.attr("href");                String areaCode  = areaUrl.substring(areaUrl.indexOf("/10/r") + 4);                if (areaName.contains("近郊"))                {                    System.out.println("\n 近郊存在");                    // 暂存区域地址                    String cityAreaUrl = aCity.getCityUrl();                    aCity.setCityUrl(baseUrl + areaItem.attr("href"));                    Dianping_getSubAreaInfos(aCity);                    aCity.setCityUrl(cityAreaUrl);                    continue;                }                areaInfos = new AreaInfo();                areaInfos.setCityId(cityId);            // 保存城市ID                areaInfos.setAreaId(areaId++);          // 保存区域ID                areaInfos.setAreaUrl(areaUrl);          // 保存区域网址                areaInfos.setAreaCnName(areaName);      // 保存区域名称                areaInfos.setAreaCode(areaCode);        // 保存区域代码                System.out.println("\n 区域名称: " + areaName + "\t区域代码: " + areaCode + "\t区域ID: " + (areaId - 1));                System.out.println(" 区域地址: " + areaUrl);                aCity.setAreaInfo(areaInfos);           // 将该区域基本信息保存至城市对象下            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getSubAreaInfos            Author: Yangzheng       Description: 获取区域下的子区域             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/9       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getSubAreaInfos(City aCity)    {        int cityId = aCity.getCityId();        int areaId = cityId * 100 + aCity.getAreaInfoList().size() + 1;        AreaInfo areaInfos = null;        String dianpingAreaUrl = aCity.getCityUrl();        System.out.println(" 该城市近郊子区域信息地址如下: \n" + dianpingAreaUrl);        Elements subAreaList = null;        try        {            Document  subAreaDoc = DianpingHelper.getWebByJsoupDianping(dianpingAreaUrl);            if (null == subAreaDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements navList = subAreaDoc.select("ul[class=navBlock]");            for (Element navItem : navList)            {                if (!navItem.select("a:contains(全部行政区)").isEmpty())                {                    subAreaList = navItem.select("ul[class=current]").select("a");                }            }            if (!subAreaList.isEmpty())            {                for (Element areaItem : subAreaList)                {                    String areaName  = areaItem.text().substring(0, areaItem.text().indexOf("(") - 1);                    String areaUrl   = baseUrl + areaItem.attr("href");                    String areaCode  = areaUrl.substring(areaUrl.indexOf("/10/r") + 4);                    areaInfos = new AreaInfo();                    areaInfos.setCityId(cityId);            // 保存城市ID                    areaInfos.setAreaId(areaId++);          // 保存区域ID                    areaInfos.setIsSubArea(1);              // 标示为子区域                    areaInfos.setAreaUrl(areaUrl);          // 保存区域网址                    areaInfos.setAreaCnName(areaName);      // 保存区域名称                    areaInfos.setAreaCode(areaCode);        // 保存区域代码                    System.out.println("\n 区域名称: " + areaName + "\t区域代码: " + areaCode + "\t区域ID: " + (areaId - 1));                    System.out.println(" 区域地址: " + areaUrl);                    aCity.setAreaInfo(areaInfos);           // 将该区域基本信息保存至城市对象下                }                System.out.println(" 该城市近郊子区域信息处理完毕.");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getCircleInfos            Author: Yangzheng       Description: 获取商圈信息             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getCircleInfos(City aCity)    {        for (AreaInfo aArea : aCity.getAreaInfoList())        {            Dianping_getAreaCircleInfos(aCity, aArea);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAreaCircleInfos            Author: Yangzheng       Description: 获取一个区域下商圈的信息             Input: AreaInfo aArea            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/25       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAreaCircleInfos(City aCity, AreaInfo aArea)    {        int circleId = aArea.getAreaId() * 100 + 1;        CircleInfo circleInfo = null;        Elements circleList = null;        String circleInfoUrl = aArea.getAreaUrl();        try        {            System.out.println("\n 开始获取" + aArea.getAreaCnName() + "(区域)下的商圈信息.");            Document circleDoc = DianpingHelper.getWebByJsoupDianping(circleInfoUrl);            if (null == circleDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements navList = circleDoc.select("ul[class=navBlock]");            for (Element navItem : navList)            {                if (!navItem.select("a:contains(全部行政区)").isEmpty())                {                    circleList = navItem.select("ul[class=current]").select("a");                }            }            if (!circleList.isEmpty())            {                for (Element circleInfoItem : circleList)                {                    circleInfo = new CircleInfo();                    String circleName;                    int endIndex = circleInfoItem.text().indexOf("(") - 1;                    if (endIndex < 1)                    {                        circleName = circleInfoItem.text();                    }                    else                    {                        circleName = circleInfoItem.text().substring(0, endIndex);                    }                    String circleUrl  = baseUrl + circleInfoItem.attr("href");                    String circleCode = circleUrl.substring(circleUrl.indexOf("/10/r") + 4);                    circleInfo.setCityId(aCity.getCityId());        // 保存城市ID                    circleInfo.setAreaId(aArea.getAreaId());        // 保存区域ID                    circleInfo.setCircleId(circleId++);             // 保存商圈ID                    circleInfo.setCircleName(circleName);           // 保存商圈名称                    circleInfo.setCircleCode(circleCode);           // 保存商圈代码                    circleInfo.setCircleUrl(circleUrl);             // 保存商圈网址                    aArea.setCircleInfo(circleInfo);                // 将该商圈基本信息保存至区域对象下                    System.out.println("\n 商圈ID: " + circleInfo.getCircleId() + "\t商圈名称: " + circleName + "\t大众商圈代码:" + circleCode);                    System.out.println(" 商圈地址: " + circleUrl);                }            }            else            {                System.out.println(aArea.getAreaCnName() + "(区域)下没有商圈划分!");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopsLogos            Author: Yangzheng       Description: 获取商户的logo             Input: City aCity            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getShopsLogos(City aCity)    {        try        {            for (ShopInfo aShop : aCity.getShopList())            {                // 下载每个商户logo图片并保存图片                if (null != aShop.getShopLogoUrl() &&                        (Config.SHOP_LOGO_CRAWLED != (aShop.getShopCrawledFlag() & Config.SHOP_LOGO_CRAWLED)))                {                    Dianping_saveShopLogoImgs(aCity, aShop);                    aShop.setShopCrawledFlag(Config.SHOP_LOGO_CRAWLED);                }            }            // 运行中保存一次            InfoSave.SC_savePrcocess(dianpingCityList, Config.dianpingDat);            // 更新数据库            DBHelper.saveDianpingLogosToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("获取商户LOGO出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping2.Dianping_saveShopLogoImgs            Author: Yangzheng       Description: 下载并保存商户logo             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_saveShopLogoImgs(City aCity, ShopInfo aShop) throws Exception    {        String logoPath = "/86/dianping" + "/" + aCity.getCityId() + "/" + aShop.getAreaId() + "/logo";        BufferedOutputStream imgOut = null;        try        {            // 下载图片            System.out.println("获取商户ID为: " + aShop.getShopId() + "的Logo");            System.out.println("Logo图片地址: " + aShop.getShopLogoUrl());            byte[] logoImgBytes = DianpingHelper.getImgByHttpclientGet(aShop.getShopLogoUrl());            // 保存图片的本地路径            String logoName = aShop.getShopId() + "_logo.jpg";            aShop.setShopLogoPath(logoPath + "/" + logoName);            // 保存图片到本地            if (logoImgBytes.length > 0)            {                // 创建文件夹                logoPath = IMG_DIR + logoPath;                File fileDir = new File(logoPath);                fileDir.setWritable(true, false);                fileDir.mkdirs();                imgOut = new BufferedOutputStream(new FileOutputStream(logoPath + "/" + logoName));                imgOut.write(logoImgBytes);                imgOut.flush();            }        }        catch (Exception ex)        {            logger.error("获取商户LOGO图片出错" + ex);            ex.printStackTrace();        }        finally        {            if (imgOut != null)            {                imgOut.close();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopDishes            Author: YangZheng       Description: 获取商户菜肴图片             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/25       YangZheng         Created Function    *****************************************************************************/    private void Dianping_getShopDishes(City aCity)    {        // 启动多线程抓取图片        Dianping_getACityDishesMultiply(aCity);        // 等待子线程结束        Dianping_waitForMultiTaskFinish(aCity);        // 保存数据信息到数据库        Dianping_saveACityShopDishesToDB(aCity);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityDishesMultiply            Author: Yangzheng       Description: 获取商户菜肴图片             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    //@SuppressWarnings("unchecked")    private void Dianping_getACityDishesMultiply(City aCity)    {        System.out.println("开始下载图片,实际要启动的工作线程数：" + subShopList.length);        // 设置线程进度标志位        aCity.setDishCrawlThreadCount(subShopList.length);        for (int i = 0; i < subShopList.length; i++)        {            System.out.println("<<<<<<=======启动线程 " + i + " 开始下载图片========>>>>>>>");            CrawlDianpingDishImgs crawlDianpingDish = new CrawlDianpingDishImgs(aCity, subShopList[i]);            Thread crawlDishThread = new Thread(crawlDianpingDish);            crawlDishThread.start();            try            {                // 避免同时启动多个线程抓取商户而导致反制措施，间隔一秒启动                Thread.sleep(1000);            }            catch (Exception ex)            {                ex.printStackTrace();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_distributeCrawlTasks            Author: YangZheng       Description: 分配抓取线程             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Dianping_distributeCrawlTasks(City aCity)    {        // 获得商户列表数组        subShopList = Dianping_distributeTasks(aCity);    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_distributeTasks            Author: YangZheng       Description: 多线程启动前任务分发             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/17       YangZheng         Created Function    *****************************************************************************/    @SuppressWarnings("unchecked")    private ArrayList<ShopInfo>[] Dianping_distributeTasks(City aCity)    {        // 定义下载商户线程数        int threadCount = Config.CRAWL_THREAD_COUNT;        // 获取商户列表        ArrayList<ShopInfo> shopTaskList = aCity.getShopList();        // 每个线程至少要执行的任务(商户)数,假如不为零则表示每个线程都会分配到任务        int minTaskCount = shopTaskList.size() / threadCount;        // 平均分配后还剩下的任务数，不为零则还有任务依个附加到前面的线程中        int remainTaskCount = shopTaskList.size() % threadCount;        // 实际要启动的线程数,如果工作线程比任务还多        // 自然只需要启动与任务相同个数的工作线程，一对一的执行        // 毕竟不打算实现了线程池，所以用不着预先初始化好休眠的线程        int actualThreadCount = minTaskCount > 0 ? threadCount : remainTaskCount;        // 要启动的线程数组，以及每个线程要执行的任务列表        ArrayList<ShopInfo> subShopList[] = new ArrayList [actualThreadCount];        int taskIndex = 0;        //平均分配后多余任务，每附加给一个线程后的剩余数，重新声明与 remainTaskCount        //相同的变量，不然会在执行中改变 remainTaskCount 原有值，产生麻烦        int remainIndces = remainTaskCount;        for (int i = 0; i < subShopList.length; i++)        {            subShopList[i] = new ArrayList<ShopInfo>();            // 如果大于零，线程要分配到基本的任务            if (minTaskCount > 0)            {                for (int j = taskIndex; j < minTaskCount + taskIndex; j++)                {                    subShopList[i].add(shopTaskList.get(j));                }                taskIndex += minTaskCount;            }            // 假如还有剩下的，则补一个到这个线程中            if (remainIndces > 0)            {                subShopList[i].add(shopTaskList.get(taskIndex++));                remainIndces--;            }        }        return subShopList;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_waitForMultiTaskFinish            Author: YangZheng       Description: 等待子线程结束             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/25       YangZheng         Created Function    *****************************************************************************/    private void Dianping_waitForMultiTaskFinish(City aCity)    {        try        {            while (0 < aCity.getDishCrawlThreadCount())            {                // 若还有子线程执行，主线程休眠10秒                Thread.sleep(10000);            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_saveACityShopsToDB            Author: Yangzheng       Description: 保存一个城市的商户数据到数据库             Input: aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_saveACityShopsToDB(City aCity)    {        DBHelper.createDianpingShopTable(aCity);        DBHelper.saveDianpingShopsToMySQL(aCity);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_saveACityShopDishesToDB            Author: YangZheng       Description: 保存图片信息到数据库             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Dianping_saveACityShopDishesToDB(City aCity)    {        try        {            // 创建菜谱表            DBHelper.createDianpingDishTable(aCity);            // 更新数据库            DBHelper.saveDianpingDishesToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("主线程保存商户图片出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getProxyList            Author: Yangzheng       Description: 获取代理             Input: NONE            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/5/21       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getProxyList()    {        try        {            CrawlProxy proxyForDianping = new CrawlProxy();            proxyForDianping.crawlProxyWeb();        }        catch (Exception ex)        {            logger.error("验证出错" + ex);            ex.printStackTrace();        }    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_testBasicInfos            Author: Yangzheng       Description: 城市区域信息抓取测试             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_testBasicInfos(ArrayList<City> CityList)    {        System.out.println("=====================================");        System.out.println("=====================================");        System.out.println("=====================================");        System.out.println("=========测试数据是否抓取完毕========");        for (City aCity : CityList)        {            System.out.println("\n 城市ID为: " + aCity.getCityId() + "\t城市名为: " + aCity.getCnName());            System.out.println(" 城市网址为: " + aCity.getCityUrl());            for (AreaInfo aArea : aCity.getAreaInfoList())            {                System.out.println("\n  区域ID为: " + aArea.getAreaId() + "\t区域名为: " + aArea.getAreaCnName() +                                   "\t区域代码为:" + aArea.getAreaCode() + "\t该区域为子区域: " + aArea.getIsSubArea());                System.out.println("  区域网址为: " + aArea.getAreaUrl());                for (CircleInfo aCircle : aArea.getCircleInfoList())                {                    System.out.println("\n   商圈ID: " + aCircle.getCircleId() + "\t商圈代码: " + aCircle.getCircleCode() +                                       "\t商圈名称: " + aCircle.getCircleName());                    System.out.println("   商圈地址: " + aCircle.getCircleUrl());                }            }        }        return;    }}/*****************************************************************************    Class Name: CrawlDianpingShopsInfo        Author: Yangzheng   Description: 抓取商户类       Caution:  --------------------------------------------------------------------------        Date          Author             Description     2013/2/25       Yangzheng          Created Class*****************************************************************************/class CrawlDianpingShopsInfo implements Runnable{    private static Logger logger = LogManager.getLogger(CrawlDianpingShopsInfo.class.getName());    private ArrayList<City> dianpingCityList;    private ArrayList<ShopInfo> subShopList;    private City aCity;    private int proxyErrorThreshold = Config.ERROR_THRESHOLD;    private DataBaseHelper DBHelper     = new DataBaseHelper();    private CrawlHelper CrawlShopHelper = new CrawlHelper();    public CrawlDianpingShopsInfo(City aCity, ArrayList<ShopInfo> subShopList)    {        this.aCity = aCity;        this.subShopList = subShopList;        this.dianpingCityList = CrawlDianping.dianpingCityList;    }    public void run()    {        // 对所有餐馆数据进行抓取并存储        Dianping_getACityShopInfos(aCity, subShopList);        // 临时调试,对于本身不存在的商户,需要给定条件跳出        int loopCount = 3;        while (!Dianping_checkACityShopesCrawled(aCity, subShopList) && loopCount-- > 0)        {            // 对抓取异常的商户重新抓取            System.out.println("\n 对上次抓取失败的商户进行重新抓取");            Dianping_getACityShopInfos(aCity, subShopList);        }        // 更新进度标志位        aCity.decDishCrawlThreadCount();    }    /*****************************************************************************     Function Name: CrawlDianpingShopsInfo.Dianping_checkACityShopesCrawled            Author: Yangzheng       Description: 检查一个城市下所有商户是否抓取完毕             Input: City aCity                    ArrayList<ShopInfo> subShopList            Output: NONE            Return: boolean           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/5/22       Yangzheng         Created Function    *****************************************************************************/    private boolean Dianping_checkACityShopesCrawled(City aCity, ArrayList<ShopInfo> subShopList)    {        boolean bAllCrawled = true;        for (ShopInfo aShop : subShopList)        {            if (Config.SHOP_INFO_CRAWLED == (Config.SHOP_INFO_CRAWLED & aShop.getShopCrawledFlag()))            {                continue;            }            else            {                bAllCrawled = false;                break;            }        }        return bAllCrawled;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getACityShopInfos            Author: Yangzheng       Description: 抓取城市下所有商户的数据             Input: NONE            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/26       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getACityShopInfos(City aCity, ArrayList<ShopInfo> subShopList)    {        // 测试使用，抓取5个餐馆        // 此处可以优化进度保存        // 设置标志位        int savePoint  = Config.SAVE_THRESHOLD;        int pausePoint = Config.PAUSE_THRESHOLD;        HttpHost httpProxyHost  = CheckProxy.httpHostList.get(0);        int proxyIndex = 1;        ShopInfo aExShop = null;        try        {            System.out.println("\n4.开始获取" + aCity.getCnName() + "的商户信息");            for (ShopInfo aShop : subShopList)            {                aExShop = aShop;                if (Config.SHOP_INFO_CRAWLED == (Config.SHOP_INFO_CRAWLED & aShop.getShopCrawledFlag()))                {                    continue;                }                // 抓取一个商户                Dianping_getAShopInfo(aCity, aShop, httpProxyHost);                // Thread.sleep(300);                // 避免反爬虫机制的反制,换代理                if (pausePoint-- <= 0 || proxyErrorThreshold < 0)                {                    System.out.println("--------------------------达到反爬虫门限,换代理---------------------");                    Thread.sleep(2000);                    httpProxyHost = CheckProxy.httpHostList.get(proxyIndex++);                    if (proxyIndex >= CheckProxy.httpHostList.size())                    {                        proxyIndex = 0;                    }                    // 重置暂停门限                    proxyErrorThreshold = Config.ERROR_THRESHOLD;                    pausePoint = Config.PAUSE_THRESHOLD;                }                if (savePoint-- <= 0)                {                    // 运行中保存一次                    synchronized (dianpingCityList)                    {                        logger.info("达到抓取商户门限，保存一次。");                        InfoSave.SC_savePrcocess(dianpingCityList, Config.dianpingDat);                        System.out.println(" 保存完毕");                    }                    savePoint = Config.SAVE_THRESHOLD;                }            }        }        catch (Exception ex)        {            // 设置标记位为未抓取 在具体函数里已经设置            aExShop.setShopCrawledFlag(Config.CLEAR_FLAG);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopInfo            Author: Yangzheng       Description: 获取一个商户的数据             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopInfo(City aCity, ShopInfo aShop, HttpHost httpProxyHost) throws Exception    {        String shopBaseUrl = "http://www.dianping.com/shop/";        try        {            System.out.println("\n<<<<<==============当前抓取的城市为: " + aCity.getCnName() + "==============>>>>");            System.out.println("<<<<<==============开始抓取该商户的数据================>>>>");            System.out.println(" 要抓取的商户名为: " + aShop.getCnName() + "\t商户ID为: " + aShop.getShopId());            System.out.println(" 商户的网址为: " + aShop.getShopUrl());            Document doc = CrawlShopHelper.getDianpingWebByHCProxy(shopBaseUrl + aShop.getShopCode(), httpProxyHost);            if (null == doc)            {                // 设置为重新抓取,返回                aShop.setShopCrawledFlag(Config.CLEAR_FLAG);                proxyErrorThreshold--;                System.out.println(" 未抓取到目标网页!");                return;            }            System.out.println("商户网址为: " + shopBaseUrl + aShop.getShopCode());            // 1.找出商户摘要的元素(包括:店名、人均消费)            Element briefIntroduction = doc.select("div[class=shop-info-con]").first();            // System.out.println("商户简介为: " + briefIntroduction);            if (briefIntroduction.hasText())            {                Dianping_getAShopBriefInfo(aCity, aShop, briefIntroduction);            }            // 2.获取推荐菜            Elements recommDishes = doc.select("div[class=shop-recommend]");            if (!recommDishes.isEmpty())            {                System.out.println("\n 有推荐菜");                Dianping_getAShopDishes(aShop, recommDishes);            }            // 3.获取商户详细信息            /* 这个部分在抓取简介时抓取了            Elements fullIntroductions = doc.select("div[class=block raw-block separated-block shop-detail-info]");            if (!fullIntroductions.isEmpty())            {                Dianping_getAShopFull(aShop, fullIntroductions);            }            */            System.out.println("\n 一个商户的数据抓取完毕");            System.out.println("<<<<<<<<<<==================================>>>>>>>>>>>");            //  设置标记位为已抓取            aShop.setShopCrawledFlag(Config.SHOP_INFO_CRAWLED);        }        catch (Exception ex)        {            aShop.setShopCrawledFlag(Config.CLEAR_FLAG);            proxyErrorThreshold--;            logger.error("获取到的网页为空,请检查网络或者代理设置" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopBriefInfo            Author: Yangzheng       Description: 获取一个商户的简介信息             Input: City aCity                    ShopInfo aShop                    Element briefIntroduction            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopBriefInfo(City aCity, ShopInfo aShop, Element briefIntroduction)    {        // 1.找出商户摘要的元素(包括:店名、人均消费)        if (briefIntroduction.hasText())        {            // 获取店名            String shopName = briefIntroduction.select("h1[class=shop-title]").text();            // 在获取商户链接时已经存储            //aShop.setCnName(shopName);            System.out.println("店名是: " + shopName);        }        // 获取商户logo地址        Elements shopLogo = briefIntroduction.select("div[class=pic-txt]").select("div[class=thumb-switch]").select("a");        if (!shopLogo.isEmpty())        {            String shopLogoUrl = shopLogo.select("img").first().attr("src");            aShop.setShopLogoUrl(shopLogoUrl);            //System.out.println("取得商户logo地址: " + shopLogoUrl);        }        // 获取人均消费        Elements perCost = briefIntroduction.select("div[class=comment-rst]").select("div[class=rst-taste]").select("span:contains(人均)");        if (!perCost.isEmpty())        {            String perCostStr = perCost.select("strong").first().text();            perCostStr = perCostStr.substring(1, perCostStr.length());            // 转换为数字存储            aShop.setPerCost(perCostStr);            System.out.println("人均消费: " + perCostStr);        }        // 获取综合评价        Elements comStar = briefIntroduction.select("div[class=comment-rst]").select("span:contains(星商户)");        if (!comStar.isEmpty())        {            String comStarStr = comStar.first().attr("title");            System.out.println("综合评级:  " + comStarStr);            aShop.setComprehensiveStar(comStarStr);        }        // 获取服务评级        Elements starInfos = briefIntroduction.select("div[class=comment-rst]").select("span[class=rst]");        for (Element starItem : starInfos)        {            if (!starItem.select("span:contains(口味)").isEmpty())            {                String tasteStar = starItem.select("span:contains(口味)").select("strong").text();                System.out.println("口味评级:  " + tasteStar);                aShop.setTasteStar(tasteStar);            }            if (!starItem.select("span:contains(环境)").isEmpty())            {                String envStar = starItem.select("span:contains(环境)").select("strong").text();                System.out.println("环境评级:  " + envStar);                aShop.setEnvironmentStar(envStar);            }            if (!starItem.select("span:contains(服务)").isEmpty())            {                String servieStar = starItem.select("span:contains(服务)").select("strong").text();                System.out.println("服务评级:  " + servieStar);                aShop.setServiceStar(servieStar);            }        }        // 获取其他餐馆信息        Elements otherInfos = briefIntroduction.select("div[class=pic-txt]").select("div[class=txt]").select("li");        for (Element infoItem : otherInfos)        {            // 获取地址            if (!infoItem.select("li:contains(地址)").isEmpty())            {                String address = infoItem.select("li:contains(地址)").select("a").first().text() +                                 infoItem.select("li:contains(地址)").select("span[itemprop=street-address]").first().text();                System.out.println("地址:  " + address);                aShop.setAddress(address);            }            // 获取电话            if (!infoItem.select("li:contains(电话)").isEmpty())            {                Elements telephoneInfos = infoItem.select("li:contains(电话)").select("span[itemprop=tel");                String telphone = "";                for (Element telephoneItem : telephoneInfos)                {                    telphone = telphone + " " + telephoneItem.text();                }                System.out.println("电话:  " + telphone);                aShop.setTelephone(telphone);            }            // 获取简介            if (!infoItem.select("li:contains(餐厅简介)").isEmpty())            {                String shopIntro = infoItem.select("li:contains(餐厅简介)").first().text().substring(5);                System.out.println("\n商户描述为:" + shopIntro);                aShop.setIntroduction(shopIntro);            }            // 获取营业时间            if (!infoItem.select("li:contains(营业时间)").isEmpty())            {                String businessHours = infoItem.select("span[class=J_full-cont]").text();                System.out.println("\n商户营业时间为:" + businessHours);                aShop.setBusinessHours(businessHours);            }            // 获取餐厅特色            if (!infoItem.select("li:contains(餐厅特色)").isEmpty())            {                Elements ServiceItems = infoItem.select("li:contains(餐厅特色)").select("span[class=desc-tag]");                String characService = "";                for (Element ServiceItem : ServiceItems)                {                    characService = characService + " " + ServiceItem.select("a").first().text();                }                System.out.println("\n特色服务为:" + characService);                aShop.setCharacService(characService);            }            // 获取餐厅别名            if (!infoItem.select("li:contains(餐厅别名)").isEmpty())            {                String tinyName = infoItem.text().substring(5);                System.out.println("\n餐厅别名为:" + tinyName);                aShop.setCnTinyName(tinyName);            }        }        // 6.获取大众坐标        if (null != aShop.getAddress())        {            Dianping_getShopBaiduCoords(aCity, aShop);            Dianping_getShopGoogleCoords(aCity, aShop);        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopBaiduCoords            Author: Yangzheng       Description:  获取商户坐标             Input: City aCity                    ShopInfo aShopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getShopBaiduCoords(City aCity, ShopInfo aShopInfo)    {        String apiBaseUrl = "http://api.map.baidu.com/geocoder?address=";        String apiParaKey  = "&output=xml&key=9d4f671d8abe8db9005e534fb9e829b2";        String apiParaCity = "&city=";        String cityName   = aCity.getCnName();        try        {            String searchUrl = apiBaseUrl + URLEncoder.encode(aShopInfo.getAddress(), "UTF-8") +                               apiParaKey + apiParaCity + URLEncoder.encode(cityName, "UTF-8");            //System.out.println("Baidu坐标查询地址为: \n" + searchUrl);            Document listDoc = CrawlShopHelper.getWebByJsoup(searchUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return;            }            String latitude  = listDoc.select("lat").first().text();            String longitude = listDoc.select("lng").first().text();            System.out.println("获取" + aShopInfo.getCnName() + "坐标成功.");            System.out.println("Baidu纬度为: " + latitude);            System.out.println("Baidu经度为: " + longitude);            System.out.println("\n");            aShopInfo.setbLat(latitude);            aShopInfo.setbLng(longitude);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getShopGoogleCoords            Author: Yangzheng       Description:  获取商户坐标             Input: City aCity                    ShopInfo aShopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getShopGoogleCoords(City aCity, ShopInfo aShopInfo)    {        String apiBaseUrl = "http://maps.googleapis.com/maps/api/geocode/xml?address=";        String apiPara    = "&sensor=false";        String cityName   = aCity.getCnName();        try        {            String searchUrl = apiBaseUrl + URLEncoder.encode(cityName, "UTF-8") + URLEncoder.encode(aShopInfo.getAddress(), "UTF-8") +                               apiPara;            //System.out.println("Google坐标查询地址为: \n" + searchUrl);            Document listDoc = CrawlShopHelper.getWebByJsoup(searchUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return;            }            if (listDoc.select("location").select("lat").hasText())            {                String latitude  = listDoc.select("location").first().select("lat").first().text();                String longitude = listDoc.select("location").first().select("lng").first().text();                System.out.println("获取" + aShopInfo.getCnName() + "坐标成功.");                System.out.println("Google纬度为: " + latitude);                System.out.println("Google经度为: " + longitude);                System.out.println("\n");                aShopInfo.setgLat(latitude);                aShopInfo.setgLng(longitude);            }            else            {                System.out.println("未取到google坐标");            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopDishes            Author: Yangzheng       Description: 获取推荐菜             Input: ShopInfo shopInfo                    Elements Introduction            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopDishes(ShopInfo shopInfo, Elements Introduction)    {        String coustomDishes = "";        String shopDishes = "";        int dishId = shopInfo.getShopId() * 1000 + 1;        // 获取网友推荐菜        Elements CustomRecommendDishes = Introduction.select("div[class=vegetable]").select("li").select("a");        // 没有推荐菜返回        if (!CustomRecommendDishes.isEmpty())        {            for (Element CustomRecommendDish : CustomRecommendDishes)            {                Dish aDish = new Dish();                String dishName = CustomRecommendDish.text();                aDish.setDishName(dishName);                aDish.setDishId(dishId++);                shopInfo.addADish(aDish);                coustomDishes = coustomDishes + dishName + " ";            }            System.out.println("\n网友推荐菜:" + coustomDishes);        }        // 获取商户推荐菜        Elements ShopRecommendDishes = Introduction.select("div[class=rec-dishes tab-item active]").select("div[class=pic-list]").select("img");        if (!ShopRecommendDishes.isEmpty())        {            for (Element ShopRecommendDish : ShopRecommendDishes)            {                Dish aDish = new Dish();                String dishName = ShopRecommendDish.attr("alt");                String dishPicUrl = ShopRecommendDish.attr("src");                aDish.setDishName(dishName);                aDish.setIsRecommendDish(1);                aDish.setDishPicUrl(dishPicUrl);                aDish.setDishId(dishId++);                System.out.println("增加该商户一个菜:  " + dishName + "  ID: " + aDish.getDishId());                System.out.println("菜肴地址图片: " + dishPicUrl);                shopInfo.addADish(aDish);                shopDishes = shopDishes + dishName + " ";            }        }        // 获取商户隐藏推荐菜        /*        Elements HideDishes = Introduction.select("script[class=J_lazyLoad-shop]");        if (!HideDishes.isEmpty())        {            String recommendHideDishes = HideDishes.toString().substring(HideDishes.toString().indexOf('>') + 1, HideDishes.toString().lastIndexOf('<'));            Elements ShopRecommendHideDishes = Jsoup.parse(recommendHideDishes).select("a[class=thumb]");            if (!ShopRecommendHideDishes.isEmpty())            {                for (Element ShopRecommendDish : ShopRecommendHideDishes)                {                    Dish aDish = new Dish();                    String dishName = ShopRecommendDish.attr("title");                    String dishPicUrl = ShopRecommendDish.select("img").first().attr("src");                    aDish.setDishName(dishName);                    aDish.setIsRecommendDish(1);                    aDish.setDishPicUrl(dishPicUrl);                    aDish.setDishId(dishId++);                    System.out.println("增加该商户一个菜:  " + dishName + "  ID: " + aDish.getDishId());                    System.out.println("菜肴地址图片: " + dishPicUrl);                    shopInfo.addADish(aDish);                    shopDishes = shopDishes + dishName + " ";                }            }        }        */        // 点评网的两种菜可能重复        shopInfo.setRecommendDishes(shopDishes);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopFull            Author: Yangzheng       Description: 获取餐馆介绍             Input: ShopInfo shopInfo                    Elements Introduction            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopFull(ShopInfo shopInfo, Elements Introduction)    {        Elements baseInfos = Introduction.select("dl");        // 解析详细信息        for (Element baseInfo : baseInfos)        {            if (!baseInfo.select(":contains(商户描述)").isEmpty())            {                String shopIntro = baseInfo.select("span[class=J_full-cont]").text();                System.out.println("\n商户描述为:" + shopIntro);                shopInfo.setIntroduction(shopIntro);            }            // 获取营业时间            else if (!baseInfo.select(":contains(营业时间)").isEmpty())            {                String businessHours = baseInfo.select("span[class=J_brief-cont Hide]").text();                if (!baseInfo.select("span[class=J_full-cont ]").isEmpty())                {                    businessHours = baseInfo.select("span[class=J_full-cont ]").text();                }                System.out.println("\n商户营业时间为:" + businessHours);                shopInfo.setBusinessHours(businessHours);            }            // 获取餐厅别名            else if (!baseInfo.select(":contains(别名)").isEmpty())            {                String tinyName = baseInfo.select("span").text();                System.out.println("\n餐厅别名为:" + tinyName);                shopInfo.setCnTinyName(tinyName);            }            // 获取公交路线            else if (!baseInfo.select(":contains(公交信息)").isEmpty())            {                String busLine = baseInfo.select("span[class=J_full-cont]").text();                System.out.println("\n公交路线为:" + busLine);                shopInfo.setBusLine(busLine);            }            else if (!baseInfo.select(":contains(餐厅特色)").isEmpty())            {                String characService = baseInfo.select("span").select("a").text();                if (characService.endsWith("更多"))                {                    characService = characService.substring(0, characService.length() - 2);                }                System.out.println("\n特色服务为:" + characService);                shopInfo.setCharacService(characService);            }            else                continue;        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopRecommDishes            Author: Yangzheng       Description: 获取推荐菜             Input: Elements Introduction                    ShopInfo shopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopRecommDishes(ShopInfo shopInfo, Elements recommendDishes)    {        //String coustomDishes = "";        String shopDishes = "";        String largePicBaseUrl = "http://hiphotos.dianping.com/view/pic/item/";        int dishId = shopInfo.getShopId() * 1000 + 1;  // 初始菜肴ID        // 获取商户推荐菜        Elements ShopRecommendDishes = recommendDishes.select("dl[class=item-bg]").select("dt").select("a");        if (!ShopRecommendDishes.isEmpty())        {            for (Element ShopRecommendDish : ShopRecommendDishes)            {                Dish aDish = new Dish();                String dishName   = ShopRecommendDish.attr("title");                String dishPicUrl = ShopRecommendDish.select("img").first().attr("src");                String dishPicCode = dishPicUrl.substring(dishPicUrl.indexOf("item/") + 5, dishPicUrl.indexOf(".jpg"));                String dishLargePicUrl = largePicBaseUrl + dishPicCode + ".jpg";                aDish.setDishName(dishName);                aDish.setDishPicCode(dishPicCode);                aDish.setIsRecommendDish(1);                aDish.setDishPicUrl(dishPicUrl);                aDish.setDishLargePicUrl(dishLargePicUrl);                aDish.setDishId(dishId++);                System.out.println("增加该商户一个推荐菜:  " + dishName + "\t\tID: " + aDish.getDishId() + "\t\t图片代码:  " + dishPicCode);                System.out.println("菜肴图片地址: " + dishPicUrl);                System.out.println("菜肴大图地址: " + dishLargePicUrl);                shopInfo.addADish(aDish);                shopDishes = shopDishes + dishName + " ";            }            System.out.println("\n商家推荐菜:" + shopDishes);        }        else        {            ShopRecommendDishes = recommendDishes.select("span[class=item-text]").select("a");            if (!ShopRecommendDishes.isEmpty())            {                for (Element ShopRecommendDish : ShopRecommendDishes)                {                    Dish aDish = new Dish();                    String dishName = ShopRecommendDish.attr("title");                    aDish.setDishName(dishName);                    aDish.setDishId(shopInfo.getShopId() * 1000 + dishId++);                    System.out.println("增加该商户一个推荐菜(无菜肴图片):  " + dishName + " \tID: " + aDish.getDishId());                    shopInfo.addADish(aDish);                    shopDishes = shopDishes + dishName + " ";                }            }            System.out.println("\n商家推荐菜:" + shopDishes);        }        // 保存推荐菜名        shopInfo.setRecommendDishes(shopDishes);        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_getAShopMenuDishes            Author: Yangzheng       Description: 获取商户菜单上菜肴             Input: ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private void Dianping_getAShopMenuDishes(ShopInfo aShop)    {        String baseMenuUrl = "http://s.dianping.com/shop/feature/";        String menuUrl = baseMenuUrl + aShop.getShopCode();        String largePicBaseUrl = "http://hiphotos.dianping.com/view/pic/item/";        int dishId = aShop.getShopId() * 1000 + aShop.getDishList().size() + 1;        try        {            Document menuDoc = CrawlShopHelper.getWebByJsoupDianping(menuUrl);            Elements menuList = menuDoc.select("ul[class=menu-list]").select("li[class=item]");            if (!menuList.isEmpty())            {                for (Element menuItem : menuList)                {                    Dish aDish = new Dish();                    String dishName = menuItem.select("div[class=content]").select("h4").select("a").first().text();                    aDish.setDishName(dishName);                    aDish.setDishId(dishId++);                    aDish.setIsRecommendDish(0);                    System.out.println("增加该商户一个菜: " + dishName + "\t\tID: " + aDish.getDishId());                    Elements dishPicItem = menuItem.select("div[class=pic]").select("a");                    if (!dishPicItem.isEmpty())                    {                        String dishPicUrl  = dishPicItem.select("img").first().attr("src");                        String dishPicCode = dishPicUrl.substring(dishPicUrl.indexOf("item/") + 5, dishPicUrl.indexOf(".jpg"));                        String dishLargePicUrl = largePicBaseUrl + dishPicCode + ".jpg";                        aDish.setDishPicCode(dishPicCode);                        aDish.setDishPicUrl(dishPicUrl);                        aDish.setDishLargePicUrl(dishLargePicUrl);                        System.out.println("菜肴图片代码: " + dishPicCode);                        System.out.println("菜肴图片地址: " + dishPicUrl);                        System.out.println("菜肴大图地址: " + dishLargePicUrl);                    }                    aShop.addADish(aDish);                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }}/*****************************************************************************    Class Name: CrawlDianpingDishImgs        Author: Yangzheng   Description: 下载图片类       Caution:  --------------------------------------------------------------------------        Date          Author             Description     2013/2/25       Yangzheng          Created Class*****************************************************************************/class CrawlDianpingDishImgs implements Runnable{    private static Logger logger = LogManager.getLogger(CrawlDianpingDishImgs.class.getName());    //本线程待执行的任务列表，你也可以指为任务索引的起始值    private City aCity;    private ArrayList<ShopInfo> subShopList = null;    private String IMG_DIR;    //private int threadId;    private DataBaseHelper DBHelper    = new DataBaseHelper();    private CrawlHelper CrawlImgHelper = new CrawlHelper();    /**    * 构造工作线程，为其指派任务列表，及命名线程 ID    * @param taskList 欲执行的任务列表    * @param threadId 线程 ID    */    public CrawlDianpingDishImgs(City aCity, ArrayList<ShopInfo> subShopList)    {        this.aCity = aCity;        this.subShopList = subShopList;        this.IMG_DIR = Config.IMG_DIR;        //this.threadId = threadId;    }    /**    * 执行被指派的所有任务    */    public void run()    {        for (ShopInfo aShop : subShopList)        {            // 没有使用统一的标志位            if (!aShop.getDishCrawledFlag())            {                Dianping_saveShopDishImgs(aCity, aShop);            }        }        // 更新进度标志位        aCity.decDishCrawlThreadCount();    }    /*****************************************************************************     Function Name: CrawlDianpingDishImgs.Dianping_saveShopDishImgs            Author: YangZheng       Description: 下载并保存商户列表的菜肴图片             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/17       YangZheng         Created Function    *****************************************************************************/    private void Dianping_saveShopDishImgs(City aCity, ShopInfo aShop)    {        String dishPath = "/86/dianping" + "/" + aShop.getCityId() + "/" + aShop.getAreaId() +                          "/dishes" + "/" + aShop.getShopId();        String dishUrl = null;        String dishUrlLeft  = null;        String dishUrlRight = null;        String goalPicUrl   = null;        String dishPicName  = null;        try        {            for (Dish aDish : aShop.getDishList())            {                System.out.println(" 正在下载" + aCity.getCnName() + "下面商户" + aShop.getCnName() + "的图片");                System.out.println(" 正在下载的商户ID为: " + aShop.getShopId());                // 分离初始图片地址，为后续组合新地址做准备                dishUrl = aDish.getDishPicUrl();                if (null == dishUrl)                {                    System.out.println("此道菜没有图片,取下一道菜");                    continue;                }                System.out.println("原始图片地址为: " + dishUrl);                dishUrlLeft  = dishUrl.substring(0, dishUrl.indexOf('('));                dishUrlRight = dishUrl.substring(dishUrl.indexOf(')') + 1, dishUrl.length());                // 原始图片地址不变                goalPicUrl = dishUrl;                // 创建图片名                dishPicName = aDish.getDishId() + "_" + CrawlDianping.initialSize + ".jpg";                // 保存图片的本地路径                aDish.setDishPicPath(dishPath + "/" + dishPicName);                // 下载图片并保存                Dianping_dowloadShopDishImgs(dishPicName, goalPicUrl, dishPath);                // 组合tinySize大小图片地址                goalPicUrl = dishUrlLeft + CrawlDianping.tinySize + dishUrlRight;                System.out.println("\n组合目标图片地址为: " + goalPicUrl);                // 创建图片名                dishPicName = aDish.getDishId() + "_" + CrawlDianping.tinySize + ".jpg";                System.out.println("图片名为: " + dishPicName);                // 保存图片的本地路径                aDish.setDishTinyPicPath(dishPath + "/" + dishPicName);                System.out.println("图片保存路径为: " + dishPath + "/" + dishPicName);                // 下载图片并保存                Dianping_dowloadShopDishImgs(dishPicName, goalPicUrl, dishPath);                // 组合smallSize大小图片地址                goalPicUrl = dishUrlLeft + CrawlDianping.smallSize + dishUrlRight;                // 创建图片名                dishPicName = aDish.getDishId() + "_" + CrawlDianping.smallSize + ".jpg";                // 保存图片的本地路径                aDish.setDishSmallPicPath(dishPath + "/" + dishPicName);                // 下载图片并保存                Dianping_dowloadShopDishImgs(dishPicName, goalPicUrl, dishPath);            }            //设置标志位            aShop.setDishCrawledFlag(true);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlDianping.Dianping_dowloadShopDishImgs            Author: Yangzheng       Description: 下载并保存指定菜肴图片             Input: String imgName                    String imgUrl                    String imgPath            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    public void Dianping_dowloadShopDishImgs(String imgName, String imgUrl, String imgPath) throws Exception    {        BufferedOutputStream imgOut = null;        try        {            byte[] dishImgBytes = CrawlImgHelper.getImgByHttpclientGet(imgUrl);            // 保存图片到本地            if (dishImgBytes.length > 0)            {                // 创建文件夹                imgPath = IMG_DIR + imgPath;                File fileDir = new File(imgPath);                fileDir.setWritable(true, false);                fileDir.mkdirs();                imgOut = new BufferedOutputStream(new FileOutputStream(imgPath + "/" + imgName));                imgOut.write(dishImgBytes);                imgOut.flush();            }        }        catch (Exception ex)        {            logger.error("下载图片文件出错" + ex);            ex.printStackTrace();        }        finally        {            if (imgOut != null)            {                imgOut.close();            }        }        return;    }}