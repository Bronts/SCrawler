/** * @(#)CrawlFantong.java * * SCrawler application * * @author * @version 1.00 2012/12/25 */import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;import java.net.URLEncoder;import java.util.ArrayList;public class CrawlFantong implements Runnable{    private DataBaseHelper DBHelper   = new DataBaseHelper();    private CrawlHelper FantongHelper = new CrawlHelper();    private static Logger logger = LogManager.getLogger(CrawlFantong.class.getName());    public  static ArrayList<City> fantongCityList = null;    private ArrayList<ShopInfo>[] subShopList;    private ArrayList<String> costLevelList   = new ArrayList<String>();    private String fantongUrl;    private String IMG_DIR;    private boolean bIsContinue = false;    private String baseUrl      = "http://www.fantong.com"; // 主网址    private String foodCode     = "j9896";                  // "餐饮"类别代码    private String defaultCode  = "j9896n15";               // 网址必填代码    private String costLevelV1  = "x1y15";                  // 1-15    private String costLevelV2  = "x16y25";                 // 16-25    private String costLevelV3  = "x26y30";                 // 26-30    private String costLevelV4  = "x31y45";                 // 31-45    private String costLevelV5  = "x46y55";                 // 46-55    private String costLevelV6  = "x56y75";                 // 56-75    private String costLevelV7  = "x76y165";                // 76-165    private String costLevelV8  = "x166y";                  // 166以上    public CrawlFantong(ArrayList<City> cityList, boolean bIsContinue)    {        this.fantongCityList = cityList;        this.bIsContinue = bIsContinue;        this.fantongUrl = Config.fantongUrl;        this.IMG_DIR    = Config.IMG_DIR;        Fanting_creatCostLevelList();    }    public void run()    {        if (bIsContinue)        {            Fantong_getAllShops(fantongCityList);        }        else        {            // 先获取城市列表信息            Fantong_getCityList(fantongCityList);            // 获取所有城市的餐馆数据            Fantong_getAllShops(fantongCityList);        }    }    /*****************************************************************************     Function Name: CrawlFantong.Fanting_creatCostLevelList            Author: Yangzheng       Description: 初始化消费档次列表             Input: NONE            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/13       Yangzheng         Created Function    *****************************************************************************/    private void Fanting_creatCostLevelList()    {        costLevelList.add(costLevelV1);        costLevelList.add(costLevelV2);        costLevelList.add(costLevelV3);        costLevelList.add(costLevelV4);        costLevelList.add(costLevelV5);        costLevelList.add(costLevelV6);        costLevelList.add(costLevelV7);        costLevelList.add(costLevelV8);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getCityList            Author: Yangzheng       Description: 从fantong网抓取数据，入口函数             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/13       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getCityList(ArrayList<City> CityList)    {        // 由于商户列表在全部类别的列表下只有十四页，因此需要细化类别        // 1.首先抓取城市基本数据        // 2.抓取区域数据，包括次级区域，商圈数据        // 在分类数据完成后，具体抓取每家商户的信息        // 优先加入北京        // Fantong_getBeijingInfo(CityList);        // 加入上海        // Fantong_getShanghaiInfo(CityList);        // 获取各城市的基本信息        Fantong_getCitiesInfo(CityList);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getCitiesInfo            Author: Yangzheng       Description: 获取城市的基本信息，获得每个城市入口地址             Input: ArrayList<City> CityList            Output: NONE            Return: private           Caution: 获取城市列表:                    使用已有的城市类:                    包含城市的1、中文名(cn_name)2、链接3、城市id (从数据库里取)      --------------------------------------------------------------------------            Date          Author             Description         2013/2/13       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getCitiesInfo(ArrayList<City> CityList)    {        // 获取城市列表首页        try        {            Document fanTongDoc = FantongHelper.getWebByJsoupFantong(fantongUrl);            if (fanTongDoc == null)            {                System.out.println("注意:获取城市列表失败，可能网络有问题，检查后重新运行该程序.");            }            Elements fanCityLists = fanTongDoc.select("div[class=main-container hcity-list-main]").select("a");            // 根据饭桶网页的城市列表，得到94个城市的链接            for (Element fanCityLink : fanCityLists)            {                String cityName = fanCityLink.text();                int    cityID   = DBHelper.getCityIdByName(cityName);                if (   0  == cityID || 1100 == cityID || 3100 == cityID ||                     1306 == cityID || 1404 == cityID || 1502 == cityID ||                      2103 == cityID || 2201 == cityID || 3403 == cityID    )                {                    logger.info(cityName + "已经抓取,跳过!");                    System.out.println(cityName + "已经抓取,跳过!");                    continue;                }                City aFanTongCity = new City();                // 获取城市名和链接、以及ID                String cityLink   = fanCityLink.attr("href");                int beginIndex    = cityLink.indexOf("'/") + 2;                int endIndex      = cityLink.lastIndexOf('/');                String cityEnName = cityLink.substring(beginIndex, endIndex);                String cityUrl    = cityLink.substring(0, endIndex) + "-recommend/j9896n15/";                // 调试使用                System.out.println(" 获取的城市为:" + cityName + "\t城市ID:" + cityID);                System.out.println(" 获取的网址为:" + cityUrl);                // 保存                aFanTongCity.setCnName(cityName);                aFanTongCity.setEnName(cityEnName);                aFanTongCity.setCityUrl(cityUrl);                aFanTongCity.setCityId(cityID);                // 保存到城市列表                CityList.add(aFanTongCity);            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getBeijingInfo            Author: YangZheng       Description: 构造北京城市信息             Input: ArrayList<City> CityList            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Fantong_getBeijingInfo(ArrayList<City> CityList)    {        // 构造城市名        String cityName   = "北京市";        String cityEnName = "beijing";        String cityUrl    = "http://www.fantong.com/beijing-recommend/j9896n15/";        int    cityID     = DBHelper.getCityIdByName(cityName);        if (0 != cityID)        {            City beijingCity = new City();            // 调试使用            System.out.println("<<<<<<<<<<<<===============================>>>>>>>>>>>");            System.out.println("\n 测试城市为: " + cityName + "\t城市ID为: " + cityID);            System.out.println(" 城市网址: " + cityUrl);            // 保存测试城市基本数据            beijingCity.setCnName(cityName);            beijingCity.setEnName(cityEnName);            beijingCity.setCityUrl(cityUrl);            beijingCity.setCityId(cityID);            // 保存到城市列表            CityList.add(beijingCity);        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShanghaiInfo            Author: YangZheng       Description: 构造上海城市信息             Input: ArrayList<City> CityList            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Fantong_getShanghaiInfo(ArrayList<City> CityList)    {        // 构造城市名        String cityName   = "上海市";        String cityEnName = "shanghai";        String cityUrl    = "http://www.fantong.com/shanghai-recommend/j9896n15/";        int    cityID     = DBHelper.getCityIdByName(cityName);        if (0 != cityID)        {            City shanghaiCity = new City();            // 调试使用            System.out.println("<<<<<<<<<<<<===============================>>>>>>>>>>>");            System.out.println("\n 测试城市为: " + cityName + "\t城市ID为: " + cityID);            System.out.println(" 城市网址: " + cityUrl);            // 保存测试城市基本数据            shanghaiCity.setCnName(cityName);            shanghaiCity.setEnName(cityEnName);            shanghaiCity.setCityUrl(cityUrl);            shanghaiCity.setCityId(cityID);            // 保存到城市列表            CityList.add(shanghaiCity);        }        return;    }    /*****************************************************************************    Function Name: CrawlFantong.Fantong_getAllShops           Author: Yangzheng      Description: 获取所有城市的餐馆数据            Input: ArrayList<City> CityList           Output: NONE           Return: private          Caution:     --------------------------------------------------------------------------           Date          Author             Description        2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAllShops(ArrayList<City> CityList)    {        // 依次抓取每个城市的餐馆数据        // 若此处抓取不成功，需要将为抓取成功的城市商户记录进行下一轮抓取        // 这里可以启动多线程抓取!!!        // 若有数据读写，可能需要加锁        for (City aCity : CityList)        {            // 判断该城市是否抓取完毕            if (Config.CITY_CRAWLED == (Config.CITY_CRAWLED & aCity.getCrawledFlag()))            {                // 已经抓取,跳过                continue;            }            // 抓取一个城市的区域信息            Fantong_getACityRegionInfo(aCity);            // 获取城市下所有餐馆的网址            Fantong_getACityShopsUrls(aCity);            // 抓取一个城市的商户数据            Fantong_getACityShops(aCity);            // 抓取商户logo            Fantong_getShopsLogos(aCity);            // 保存菜肴图片到数据库            Fantong_getShopDishes(aCity);            // 将该城市标记为已抓取完毕            aCity.setCrawledFlag(Config.CITY_CRAWLED);            System.out.println(aCity.getCnName() + "的数据抓取完毕.\n\n\n");        }        System.out.println(" 所有城市的商户信息已经抓取完毕!");        System.exit(0);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityRegionInfo            Author: Yangzheng       Description: 抓取一个城市区域信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/23       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getACityRegionInfo(City aCity)    {        // 判断区域信息是否抓取完毕        if (Config.REGIONS_CRAWLED != (Config.REGIONS_CRAWLED & aCity.getCrawledFlag()))        {            // 获取区域信息            Fantong_getAreasInfo(aCity);            // 获取区域下商圈信息            Fantong_getCirclesInfo(aCity);            aCity.setCrawledFlag(Config.REGIONS_CRAWLED);            // 运行中入库保存一次            DBHelper.saveFantongRegionsToMySQL(aCity);            try            {                // 抓取完区域信息，保存一次(加锁)                synchronized (fantongCityList)                {                    logger.info("抓取完区域信息，保存一次");                    InfoSave.SC_savePrcocess(fantongCityList, Config.fantongDat);                    System.out.println(" 保存完毕");                }            }            catch (Exception ex)            {                ex.printStackTrace();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAreasInfo            Author: Yangzheng       Description: 获取一个城市区域基本信息             Input: City aFantongCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAreasInfo(City aFantongCity)    {        int cityId = aFantongCity.getCityId();        int areaId = cityId * 100 + 1;        AreaInfo areaInfo = null;        try        {            logger.entry();            Document navDoc = FantongHelper.getWebByJsoupFantong(aFantongCity.getCityUrl());            if (null == navDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements navList = navDoc.select("div[class=select]").select("dl");            for (Element navInfo : navList)            {                // 根据分类选择含有"区域"二字的元素                if (!navInfo.select("dt:contains(区域)").isEmpty())                {                    Elements areaList = navInfo.select("a[href]");                    for (Element areaInfoDiv : areaList)                    {                        areaInfo = new AreaInfo();                        String areaUrl = areaInfoDiv.attr("href");                        String areaName = areaInfoDiv.text();                        String areaCode = areaUrl.substring(areaUrl.indexOf(defaultCode) +                                                            defaultCode.length(), areaUrl.lastIndexOf('/'));                        areaInfo.setCityId(cityId);                 // 保存城市ID                        areaInfo.setAreaId(areaId++);               // 保存区域ID                        areaInfo.setAreaUrl(baseUrl + areaUrl);     // 保存区域网址                        areaInfo.setAreaCnName(areaName);           // 保存区域名称                        areaInfo.setAreaCode(areaCode);             // 保存区域代码                        aFantongCity.setAreaInfo(areaInfo);         // 将该区域基本信息保存至城市对象下                        System.out.println(" 区域ID: " + (areaId - 1) + "\t区域代码: " + areaCode +                                           " 区域名称: " + areaName);                    }                }            }            logger.exit();        }        catch (Exception ex)        {            logger.error("抓取区域信息出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getCirclesInfo            Author: Yangzheng       Description: 获取区域下商圈的基本信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getCirclesInfo(City aCity)    {        for (AreaInfo aArea : aCity.getAreaInfoList())        {            // 获取每个区域下的商圈信息            Fantong_getAreaCirclesInfo(aArea, aCity.getCityId());        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAreaCirclesInfo            Author: Yangzheng       Description: 获取一个区域下的商圈信息             Input: AreaInfo aArea                    int cityId            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAreaCirclesInfo(AreaInfo aArea, int cityId)    {        int areaId   = aArea.getAreaId();        int circleId = areaId * 100 + 1;        String areaCode = aArea.getAreaCode();        CircleInfo circleInfo = null;        try        {            logger.entry();            Document circleDoc = FantongHelper.getWebByJsoupFantong(aArea.getAreaUrl());            if (null == circleDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");            }            // 获取本页内的的分类条件            Elements circleList = circleDoc.select("div[class=select]").select("div[class=secitem]").select("a[href]");            if (!circleList.isEmpty())            {                System.out.println(" 开始抓取" + aArea.getAreaCnName() + "(区域)下的商圈信息!");                for (Element circleInfoDiv : circleList)                {                    circleInfo = new CircleInfo();                    String circleUrl  = circleInfoDiv.attr("href");                    String circleName = circleInfoDiv.text();                    String circleCode = circleUrl.substring(circleUrl.indexOf(defaultCode + areaCode) +                                                            (defaultCode + areaCode).length(), circleUrl.lastIndexOf('/'));                    circleInfo.setCircleId(circleId++);             // 保存商圈ID                    circleInfo.setAreaId(areaId);                   // 保存区域ID                    circleInfo.setCityId(cityId);                   // 保存城市ID                    circleInfo.setCircleName(circleName);           // 保存商圈名称                    circleInfo.setCircleUrl(baseUrl + circleUrl);   // 保存商圈网址                    circleInfo.setCircleCode(circleCode);           // 保存商圈代码                    aArea.setCircleInfo(circleInfo);                // 将该商圈基本信息保存至区域对象下                    System.out.println(" 商圈ID: " + (circleId - 1) + "\t商圈代码: " + circleCode +                                       "\t商圈名称: " + circleName);                    //System.out.println(" 商圈地址: " + baseUrl + circleUrl);                }            }            else            {                System.out.println(aArea.getAreaCnName() + "(区域)下没有商圈划分!");            }            logger.exit();        }        catch (Exception ex)        {            logger.error("抓取商圈信息出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityShops            Author: Yangzheng       Description:  获取一个城市所有餐馆的数据             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getACityShops(City aCity)    {        // 分配抓取线程        Fantong_distributeCrawlTasks(aCity);        // 多线成对商户数据进行抓取        Fantong_getACityShopsMultiply(aCity);        // 等待抓取子线程结束        Fantong_waitForMultiTaskFinish(aCity);        // 存储商户信息到数据库        Fantong_saveShopsToDB(aCity);        System.out.println("\n End." + aCity.getCnName() + "的餐馆数据抓取完毕.\n\n\n");        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityShopsUrls            Author: Yangzheng       Description: 获取一个城市下的所有餐馆链接             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getACityShopsUrls(City aCity)    {        // 在此处，抓取一个连接就应该创建一个shop对象，保存各个ID        System.out.println("\n 1.开始获取" + aCity.getCnName() + "的所有餐馆链接，并获取餐馆数量");        try        {            for (AreaInfo aArea : aCity.getAreaInfoList())            {                System.out.println("抓取的区域为: " + aArea.getAreaCnName());                if (!aArea.getCircleInfoList().isEmpty())                {                    // 抓取商圈下的商户连接                    Fantong_getShopsInCircle(aArea, aCity);                }                else                {                    // 抓取区域下的商户连接                    System.out.println("\n\n" + aArea.getAreaCnName() + "下不存在商圈");                    Fantong_getShopsInArea(aArea, aCity);                }            }            // 抓取完商户网址，保存一次            synchronized (fantongCityList)            {                logger.info("抓取完" + aCity.getCnName() + "商户网址，保存一次");                InfoSave.SC_savePrcocess(fantongCityList, Config.fantongDat);                System.out.println(" 保存完毕");            }        }        catch (Exception ex)        {            logger.error("抓取网址出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopsInCircle            Author: Yangzheng       Description: 抓取商圈下的商户连接             Input: AreaInfo aArea                    City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopsInCircle(AreaInfo aArea, City aCity)    {        for (CircleInfo aCircle : aArea.getCircleInfoList())        {            System.out.println("抓取的商圈为: " + aCircle.getCircleName());            for (String costLevel : costLevelList)            {                // 重新组合地址                int     pageCount = 1;                boolean isNextPageExist = true;                String baseEntryUrl = aCircle.getCircleUrl().substring(0, aCircle.getCircleUrl().lastIndexOf('/'));                baseEntryUrl = baseEntryUrl + costLevel + "g";  // g为页数代码                String entryUrl = baseEntryUrl + pageCount;                System.out.println("商圈下组合地址为: " + entryUrl);                // 判断是否还有下个分页，如果有，重复调用页面解析                while ((true == isNextPageExist) && (pageCount++ <= 14) )                {                    // 解析每页中所有的餐馆链接并存储                    isNextPageExist = Fantong_getShopUrlsInAPage(entryUrl, aCircle, aCity);                    entryUrl = baseEntryUrl + pageCount;                }            }        }    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopsInArea            Author: Yangzheng       Description:  抓取区域下的商户连接             Input: AreaInfo aArea                    City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopsInArea(AreaInfo aArea, City aCity)    {        System.out.println("抓取的区域为: " + aArea.getAreaCnName());        // 该区域下没有商圈，需要构造商圈ID，为零        CircleInfo aCircle = new CircleInfo();        aCircle.setCityId(aCity.getCityId());        aCircle.setAreaId(aArea.getAreaId());        aCircle.setCircleId(aArea.getAreaId() * 100);        for (String costLevel : costLevelList)        {            // 重新组合地址            int     pageCount = 1;            boolean isNextPageExist = true;            String baseEntryUrl = aArea.getAreaUrl().substring(0, aArea.getAreaUrl().lastIndexOf('/'));            baseEntryUrl = baseEntryUrl + costLevel + "g";  // g为页数代码            String entryUrl = baseEntryUrl + pageCount;            System.out.println("\n" + aArea.getAreaCnName() + "区域下组合地址为: " + entryUrl);            // 判断是否还有下个分页，如果有，重复调用页面解析            while ((true == isNextPageExist) && (pageCount++ <= 14) )            {                // 解析每页中所有的餐馆链接并存储                isNextPageExist = Fantong_getShopUrlsInAPage(entryUrl, aCircle, aCity);                entryUrl = baseEntryUrl + pageCount;            }        }    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopUrlsInAPage            Author: Yangzheng       Description: 解析每页中所有的餐馆链接并存储             Input: String aPageUrl                    CircleInfo aCircle                    City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/15       Yangzheng         Created Function    *****************************************************************************/    private boolean Fantong_getShopUrlsInAPage(String aPageUrl, CircleInfo aCircle, City aCity)    {        boolean isNextPageExist = true;        // 完成两个动作，取出餐馆链接，判断是否存在下页的链接        try        {            // 测试限制 test_info            if (aCity.getShopsNum() >= 20)                return false;            Document listDoc = FantongHelper.getWebByJsoupFantong(aPageUrl + '/');            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return false;            }            // 获取本页内的所有餐馆链接 class中的空格不能删掉  注意 jsoup貌似对空格敏感，所以用*=            Elements shopList = listDoc.select("div[class=listbox]").select("div[class*=result_item ]");            for (Element shopInfoItem : shopList)            {                ShopInfo aShop = new ShopInfo();                // 直接从商户列表中取出商户数，递加成为商户ID                int shopId = aCity.getShopsNum() + 1;                // 需要筛选出两个a元素，一个是餐馆链接，一个是(餐馆)图片地址                Element shopInfo = shopInfoItem.select("h2").first();                String shopUrl = shopInfo.select("a").first().attr("href");                shopUrl = baseUrl + shopUrl;                String logoUrl = shopInfoItem.select("a").first().select("img").first().attr("src");                System.out.println("取到商户链接: " + shopUrl);                aShop.setCityId(aCircle.getCityId());                aShop.setAreaId(aCircle.getAreaId());                aShop.setCircleId(aCircle.getCircleId());                aShop.setShopId(shopId);                aShop.setShopUrl(shopUrl);                // 相同的图和无logo不存                if (!(logoUrl.contains("d697179f6c05695f79f93bbd0321c8e1") || logoUrl.contains("no-pic")))                {                    aShop.setShopLogoUrl(logoUrl);                    System.out.println("取到商户logo: " + logoUrl);                }                aCity.addAShop(aShop);            }            // 判断是否存在下一页,使用饭统十四页限制也可以            Elements otherPagesLink = listDoc.select("div[class=pagination]").select("a:contains(下一页)");            if (otherPagesLink.isEmpty())            {                isNextPageExist = false;                System.out.println("该条件下没有餐馆了");            }        }        catch (Exception ex)        {            logger.error("抓取商户链接错误." + ex);            ex.printStackTrace();        }        return isNextPageExist;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityShopsMultiply            Author: YangZheng       Description: 多线程抓取商户信息             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Fantong_getACityShopsMultiply(City aCity)    {        System.out.println("开始抓取商户信息,实际要启动的工作线程数：" + subShopList.length);        // 设置线程进度标志位        aCity.setDishCrawlThreadCount(subShopList.length);        for (int i = 0; i < subShopList.length; i++)        {            System.out.println("<<<<<<=======启动线程 " + i + " 开始下载商户信息========>>>>>>>");            CrawlFantongShopsInfo crawlFantongShops = new CrawlFantongShopsInfo(aCity, subShopList[i]);            Thread crawlShopsThread = new Thread(crawlFantongShops);            crawlShopsThread.start();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_waitForMultiTaskFinish            Author: Yangzheng       Description: 等待所有子线结束             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/25       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_waitForMultiTaskFinish(City aCity)    {        try        {            while (0 < aCity.getDishCrawlThreadCount())            {                // 若还有子线程执行，主线程休眠10秒                Thread.sleep(10000);            }            System.out.println("多线程执行完毕.");        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_distributeCrawlTasks            Author: YangZheng       Description: 分配抓取线程             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Fantong_distributeCrawlTasks(City aCity)    {        subShopList = Fantong_distributeTasks(aCity);    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_distributeTasks            Author: YangZheng       Description: 多线程启动前任务分发             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/17       YangZheng         Created Function    *****************************************************************************/    @SuppressWarnings("unchecked")    private ArrayList<ShopInfo>[] Fantong_distributeTasks(City aCity)    {        // 定义下载商户线程数        int threadCount = Config.CRAWL_THREAD_COUNT;        // 获取商户列表        ArrayList<ShopInfo> shopTaskList = aCity.getShopList();        // 每个线程至少要执行的任务(商户)数,假如不为零则表示每个线程都会分配到任务        int minTaskCount = shopTaskList.size() / threadCount;        // 平均分配后还剩下的任务数，不为零则还有任务依个附加到前面的线程中        int remainTaskCount = shopTaskList.size() % threadCount;        // 实际要启动的线程数,如果工作线程比任务还多        // 自然只需要启动与任务相同个数的工作线程，一对一的执行        // 毕竟不打算实现了线程池，所以用不着预先初始化好休眠的线程        int actualThreadCount = minTaskCount > 0 ? threadCount : remainTaskCount;        // 要启动的线程数组，以及每个线程要执行的任务列表        ArrayList<ShopInfo> subShopList[] = new ArrayList [actualThreadCount];        int taskIndex = 0;        //平均分配后多余任务，每附加给一个线程后的剩余数，重新声明与 remainTaskCount        //相同的变量，不然会在执行中改变 remainTaskCount 原有值，产生麻烦        int remainIndces = remainTaskCount;        for (int i = 0; i < subShopList.length; i++)        {            subShopList[i] = new ArrayList<ShopInfo>();            // 如果大于零，线程要分配到基本的任务            if (minTaskCount > 0)            {                for (int j = taskIndex; j < minTaskCount + taskIndex; j++)                {                    subShopList[i].add(shopTaskList.get(j));                }                taskIndex += minTaskCount;            }            // 假如还有剩下的，则补一个到这个线程中            if (remainIndces > 0)            {                subShopList[i].add(shopTaskList.get(taskIndex++));                remainIndces--;            }        }        return subShopList;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_saveShopsToDB            Author: YangZheng       Description: 保存商户信息             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/24       YangZheng         Created Function    *****************************************************************************/    private void Fantong_saveShopsToDB(City aCity)    {        DBHelper.createFantongShopTable(aCity);        DBHelper.saveFantongShopToMySQL(aCity);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopsLogos            Author: Yangzheng       Description: 获取商户的logo             Input: City aCity            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopsLogos(City aCity)    {        try        {            for (ShopInfo aShop : aCity.getShopList())            {                // 下载每个商户logo图片并保存图片                if (null != aShop.getShopLogoUrl() &&                    (Config.SHOP_LOGO_CRAWLED != (aShop.getShopCrawledFlag() & Config.SHOP_LOGO_CRAWLED)))                {                    Fantong_saveShopLogoImgs(aCity, aShop);                    aShop.setShopCrawledFlag(Config.SHOP_LOGO_CRAWLED);                }            }            // 运行中保存一次            InfoSave.SC_savePrcocess(fantongCityList, Config.fantongDat);            // 更新数据库            DBHelper.saveFantongLogosToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("获取商户LOGO出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_saveShopLogoImgs            Author: Yangzheng       Description: 下载并保存商户logo             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_saveShopLogoImgs(City aCity, ShopInfo aShop) throws Exception    {        String logoPath = "/86/g3" + "/" + aCity.getCityId() + "/" + aShop.getAreaId() + "/logo";        BufferedOutputStream imgOut = null;        try        {            // 下载图片            System.out.println("获取商户ID为: " + aShop.getShopId() + "\t商户名为: " + aShop.getCnName() + "的Logo");            //System.out.println("Logo图片地址: " + aShop.getShopLogoUrl());            byte[] logoImgBytes = FantongHelper.getImgByHttpclientGet(aShop.getShopLogoUrl());            // 保存图片的本地路径            String logoName = aShop.getShopId() + "_logo.jpg";            aShop.setShopLogoPath(logoPath + "/" + logoName);            // 保存图片到本地            if (logoImgBytes.length > 0)            {                // 创建文件夹                logoPath = IMG_DIR + logoPath;                File fileDir = new File(logoPath);                fileDir.setWritable(true, false);                fileDir.mkdirs();                imgOut = new BufferedOutputStream(new FileOutputStream(logoPath + "/" + logoName));                imgOut.write(logoImgBytes);                imgOut.flush();            }        }        catch (Exception ex)        {            logger.error("获取商户LOGO图片出错" + ex);            ex.printStackTrace();        }        finally        {            if (imgOut != null)            {                imgOut.close();            }        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopDishes            Author: Yangzheng       Description: 抓取菜肴图片             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopDishes(City aCity)    {        // 启动多线程抓取图片        Fantong_getACityDishesMultiply(aCity);        // 等待子线程结束        Fantong_waitForMultiTaskFinish(aCity);        // 保存数据信息到数据库        Fantong_saveACityShopDishesToDB(aCity);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityDishesMultiply            Author: Yangzheng       Description: 获取商户菜肴图片             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/11       Yangzheng         Created Function    *****************************************************************************/    //@SuppressWarnings("unchecked")    private void Fantong_getACityDishesMultiply(City aCity)    {        System.out.println("开始下载图片,实际要启动的工作线程数：" + subShopList.length);        // 设置线程进度标志位        aCity.setDishCrawlThreadCount(subShopList.length);        for (int i = 0; i < subShopList.length; i++)        {            System.out.println("<<<<<<=======启动线程 " + i + " 开始下载图片========>>>>>>>");            CrawlFantongDishes crawlFantongDish = new CrawlFantongDishes(aCity, subShopList[i]);            Thread crawlDishThread = new Thread(crawlFantongDish);            crawlDishThread.start();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_saveACityShopDishesToDB            Author: Yangzheng       Description: 保存图片信息到数据库             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/25       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_saveACityShopDishesToDB(City aCity)    {        try        {            // 更新数据库            DBHelper.createFantongDishTable(aCity);            DBHelper.saveFantongDishesToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("主线程保存商户图片出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_testBasicInfos            Author: Yangzheng       Description: 测试函数             Input: ArrayList<City> CityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_testBasicInfos(ArrayList<City> CityList)    {        System.out.println("=====================================");        System.out.println("=====================================");        System.out.println("=====================================");        System.out.println("=========测试数据是否抓取完毕========");        for (City aFantongCity : CityList)        {            System.out.println("城市ID为: " + aFantongCity.getCityId() + "城市名为: " + aFantongCity.getCnName());            System.out.println("城市网址为: " + aFantongCity.getCityUrl());            for (AreaInfo aArea : aFantongCity.getAreaInfoList())            {                System.out.println("区域ID为: " + aArea.getAreaId() + "区域名为: " + aArea.getAreaCnName() +                                   "区域代码为:" + aArea.getAreaCode());                System.out.println("区域网址为: " + aArea.getAreaUrl());                for (CircleInfo aCircle : aArea.getCircleInfoList())                {                    System.out.println(" 商圈ID: " + aCircle.getCircleId() + " 商圈代码: " + aCircle.getCircleCode() +                                       " 商圈名称: " + aCircle.getCircleName());                    System.out.println(" 商圈地址: " + aCircle.getCircleUrl());                }            }        }        return;    }}/*****************************************************************************    Class Name: CrawlFantongShopsInfo        Author: Yangzheng   Description: 抓取商户类       Caution:  --------------------------------------------------------------------------        Date          Author             Description     2013/2/25       Yangzheng          Created Class*****************************************************************************/class CrawlFantongShopsInfo implements Runnable{    private static Logger logger = LogManager.getLogger(CrawlFantongShopsInfo.class.getName());    private ArrayList<City> fantongCityList;    private ArrayList<ShopInfo> subShopList;    private City aCity;    private DataBaseHelper DBHelper     = new DataBaseHelper();    private CrawlHelper CrawlShopHelper = new CrawlHelper();    public CrawlFantongShopsInfo(City aCity, ArrayList<ShopInfo> subShopList)    {        this.aCity = aCity;        this.subShopList = subShopList;        this.fantongCityList = CrawlFantong.fantongCityList;    }    public void run()    {        // 对所有餐馆数据进行抓取并存储        System.out.println("\n 2.开始获取" + aCity.getCnName() + "的所有餐馆的信息");        Fantong_getACityShopInfos(aCity, subShopList);        // 对抓取异常的餐馆数据进行重新抓取        System.out.println("\n 对" + aCity.getCnName() + "抓取异常的所有餐馆信息进行重新抓取");        Fantong_getACityShopInfos(aCity, subShopList);        System.out.println("\n End." + aCity.getCnName() + "的餐馆数据抓取完毕.\n\n\n");        // 更新进度标志位        aCity.decDishCrawlThreadCount();        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getACityShopInfos            Author: Yangzheng       Description: 抓取一个城市的餐馆数据             Input: City aCity                    ArrayList<ShopInfo> subShopList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getACityShopInfos(City aCity, ArrayList<ShopInfo> subShopList)    {        int savePoint = Config.SAVE_THRESHOLD;        for (ShopInfo aShop : subShopList)        {            if (Config.SHOP_INFO_CRAWLED == (aShop.getShopCrawledFlag() & Config.SHOP_INFO_CRAWLED))            {                continue;            }            Fantong_getAShopInfo(aCity, aShop);            if (savePoint-- <= 0)            {                try                {                    // 运行中保存一次                    synchronized (fantongCityList)                    {                        logger.info("达到抓取商户门限，保存一次。");                        InfoSave.SC_savePrcocess(fantongCityList, Config.fantongDat);                        System.out.println(" 保存完毕");                    }                    savePoint = Config.SAVE_THRESHOLD;                }                catch (Exception ex)                {                    ex.printStackTrace();                }            }        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAShopInfo            Author: Yangzheng       Description: 获取一个商户的数据并存储             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution: 可能出现网络超时导致这个商户不能抓取，需要记录该商户，重新抓取                    由于商户信息分别在不同的元素内，需要封装三个函数      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAShopInfo(City aCity, ShopInfo aShop)    {        try        {            logger.entry();            System.out.println("\n <<<<<=============当前抓取的城市为: " + aCity.getCnName() + "=============>>>>");            System.out.println("<<<<<<<<<<<<<<<<===================================>>>>>>>>>>>>>>>>");            System.out.println("开始抓取一个商户数据");            Document doc = CrawlShopHelper.getWebByJsoupFantong(aShop.getShopUrl());            // 1.找出商户摘要的元素(包括:店名、人均消费)            Element briefIntroduction = doc.select("div[class=res_introduction]").first();            Fantong_getAShopBriefInfo(aCity, aShop, briefIntroduction);            // 获取推荐菜和商户具体信息            // 由于网页中该class值有空格，所以使用*=            Elements fullIntroductions = doc.select("div[class*=hotel_reservation mt10]");            for (Element Introduction : fullIntroductions)            {                // 2.获取推荐菜                if (!Introduction.select("h5:contains(推荐菜)").isEmpty())                {                    Fantong_getAShopDishes(Introduction, aShop);                }                // 3.获取完整介绍的信息                if (!Introduction.select("h5:contains(商家详情)").isEmpty())                {                    Fantong_getAShopFullInfo(Introduction, aShop);                }            }            // 4.获取饭统网商户坐标            if (null != aShop.getAddress())            {                Fantong_getShopBaiduCoords(aCity, aShop);                Fantong_getShopGoogleCoords(aCity, aShop);            }            //  设置标记位为已抓取            aShop.setShopCrawledFlag(Config.SHOP_INFO_CRAWLED);            System.out.println("\n一个商户的数据抓取完毕");            logger.exit();        }        catch (Exception ex)        {            // 异常则标记为未抓取            aShop.setShopCrawledFlag(Config.CLEAR_FLAG);            logger.error("抓取商户信息时出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAShopBriefInfo            Author: Yangzheng       Description: 获取简要信息             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAShopBriefInfo(City aCity, ShopInfo aShop, Element briefIntroduction)    {        // 1.找出商户摘要的元素(包括:店名、人均消费)        if (briefIntroduction.hasText())        {            // 获取店名            String shopName = briefIntroduction.select("h1").text();            aShop.setCnName(shopName);            System.out.println("店名是:" + shopName + "\t商户ID: " + aShop.getShopId());            // 获取评价            String comStarStr = briefIntroduction.select("dd").select("i").text();            System.out.println("综合评级:  " + comStarStr);            aShop.setComprehensiveStar(comStarStr);            Elements otherStars = briefIntroduction.select("dd[class=kw_hj]").select("em");            String tasteStar  = otherStars.get(0).text();            System.out.println("口味评级:  " + tasteStar);            aShop.setTasteStar(tasteStar);            String envStar    = otherStars.get(1).text();            System.out.println("环境评级:  " + envStar);            aShop.setEnvironmentStar(envStar);            String servieStar = otherStars.get(2).text();            System.out.println("服务评级:  " + servieStar);            aShop.setServiceStar(servieStar);            // 获取人均消费            Element perCost = briefIntroduction.select("dd").get(1).select("span").first();            String perCostStr = perCost.text().substring(1, perCost.text().indexOf('['));            aShop.setPerCost(perCostStr);            System.out.println("\n人均消费:" + perCostStr);        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAShopDishes            Author: Yangzheng       Description: 获取推荐菜             Input: Element Introduction                    ShopInfo shopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAShopDishes(Element Introduction, ShopInfo shopInfo)    {        String rcommendDishes = "";        String shopDishes  = "";        int dishId = shopInfo.getShopId() * 1000 + 1;        Elements CustomRecommendDishes = null;        Elements ShopRecommendDishes = null;        // 获取网友推荐菜        CustomRecommendDishes = Introduction.select("p[class=tjc_p]").select("a");        // 若没有网友推荐菜跳过        if (null != CustomRecommendDishes)        {            for (Element CustomRecommendDish : CustomRecommendDishes)            {                Dish aDish = new Dish();                String dishName = CustomRecommendDish.text();                aDish.setDishName(dishName);                aDish.setDishId(dishId++);                shopInfo.addADish(aDish);                rcommendDishes = rcommendDishes + dishName + " ";            }            System.out.println("\n 网友推荐菜:" + rcommendDishes);        }        // 获取商户推荐菜        ShopRecommendDishes = Introduction.select("ul[class=recommended_cttj]").select("li");        if (null != ShopRecommendDishes)        {            for (Element shopRecommendDish : ShopRecommendDishes)            {                Dish aDish = new Dish();                String dishName   = shopRecommendDish.select("p[class=tittle_l]").select("a").first().text();                String dishMiddlePicUrl = shopRecommendDish.select("a").first().select("img").first().attr("src");                String dishPicUrl = dishMiddlePicUrl.replaceAll("/middle/", "/origin/");                String dishPicCode = dishPicUrl.substring(dishMiddlePicUrl.indexOf("middle/") + 7);                aDish.setDishName(dishName);                aDish.setIsRecommendDish(1);                aDish.setDishPicUrl(dishPicUrl);                aDish.setDishMiddlePicUrl(dishMiddlePicUrl);                aDish.setDishId(dishId++);                aDish.setDishPicCode(dishPicCode);                System.out.println(" 增加该商户一个菜:  " + dishName + "\tID: " + aDish.getDishId());                System.out.println(" 菜肴图片代码: " + dishPicCode);                System.out.println(" 菜肴图片地址: " + dishPicUrl);                System.out.println(" 菜肴中图地址: " + dishMiddlePicUrl);                shopInfo.addADish(aDish);                shopDishes = shopDishes + dishName + " ";            }            System.out.println("\n商家推荐菜:" + shopDishes);        }        shopInfo.setRecommendDishes(shopDishes);        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getAShopFullInfo            Author: Yangzheng       Description:  获取餐馆介绍             Input: Element Introduction                    ShopInfo shopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getAShopFullInfo(Element Introduction, ShopInfo aShop)    {        Elements baseInfos = Introduction.select("dd");        String shopInfo = null;        // 获取餐馆简介        if (!Introduction.select("dd[class=txt-short]").isEmpty())        {            shopInfo = Introduction.select("dd[class=txt-short]").first().text();            System.out.println("\n短简介为:" + shopInfo);        }        if (!Introduction.select("dd[class=txt-long]").isEmpty())        {            shopInfo = Introduction.select("dd[class=txt-long]").first().text();            //System.out.println("\n长简介为:" + shopInfo);        }        if (shopInfo != null)        {            // 保存简介，未保存短简介            aShop.setIntroduction(shopInfo);        }        // 解析其他信息        for (Element baseInfo : baseInfos)        {            if (!baseInfo.select(":contains(餐厅地址)").isEmpty())            {                // 需要特别处理下(公交/)                String address = baseInfo.select("span").text().replace("公交/驾车", "");                System.out.println("\n餐厅地址为:" + address);                aShop.setAddress(address);            }            // 商家别名            else if (!baseInfo.select(":contains(商家别名)").isEmpty())            {                String tinyName = baseInfo.select("span").text();                System.out.println("\n商家别名为:" + tinyName);                aShop.setCnTinyName(tinyName);            }            // 获取营业时间            else if (!baseInfo.select(":contains(营业时间)").isEmpty())            {                // 需要处理掉&nbsp;                String businessHours = baseInfo.select("span").text();                if (businessHours.length() > 1)                {                    businessHours = businessHours.substring(0, businessHours.length() - 1);                }                System.out.println("\n营业时间为:" + businessHours);                aShop.setBusinessHours(businessHours);            }            // 获取餐厅菜系            else if (!baseInfo.select(":contains(餐厅菜系)").isEmpty())            {                String cuisineStyle = baseInfo.select("span").text();                System.out.println("\n餐厅菜系为:" + cuisineStyle);                aShop.setCuisineStyle(cuisineStyle);            }            // 获取公交路线            else if (!baseInfo.select(":contains(公交路线)").isEmpty())            {                String busLine = baseInfo.select("span").text();                System.out.println("\n公交路线为:" + busLine);                aShop.setBusLine(busLine);            }            else if (!baseInfo.select(":contains(特色服务)").isEmpty())            {                String characService = baseInfo.select("span").text();                System.out.println("\n特色服务为:" + characService);                aShop.setCharacService(characService);            }            else                continue;        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopBaiduCoords            Author: Yangzheng       Description: 获取百度坐标             Input: City aCity                    ShopInfo aShopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/14       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopBaiduCoords(City aCity, ShopInfo aShopInfo)    {        String apiBaseUrl = "http://api.map.baidu.com/geocoder?address=";        String apiParaKey  = "&output=xml&key=9d4f671d8abe8db9005e534fb9e829b2";        String apiParaCity = "&city=";        String cityName   = aCity.getCnName();        try        {            String searchUrl = apiBaseUrl + URLEncoder.encode(aShopInfo.getAddress(), "UTF-8") +                               apiParaKey + apiParaCity + URLEncoder.encode(cityName, "UTF-8");            //System.out.println("Baidu坐标查询地址为: \n" + searchUrl);            Document listDoc = CrawlShopHelper.getWebByJsoup(searchUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return;            }            String latitude  = listDoc.select("lat").first().text();            String longitude = listDoc.select("lng").first().text();            System.out.println("获取" + aShopInfo.getCnName() + "坐标成功.");            System.out.println("Baidu纬度为: " + latitude);            System.out.println("Baidu经度为: " + longitude);            System.out.println("\n");            aShopInfo.setbLat(latitude);            aShopInfo.setbLng(longitude);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_getShopGoogleCoords            Author: Yangzheng       Description:  获取商户坐标             Input: City aCity                    ShopInfo aShopInfo            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/1       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_getShopGoogleCoords(City aCity, ShopInfo aShopInfo)    {        String apiBaseUrl = "http://maps.googleapis.com/maps/api/geocode/xml?address=";        String apiPara    = "&sensor=false";        String cityName   = aCity.getCnName();        try        {            String searchUrl = apiBaseUrl + URLEncoder.encode(cityName, "UTF-8") + URLEncoder.encode(aShopInfo.getAddress(), "UTF-8") +                               apiPara;            //System.out.println("Google坐标查询地址为: \n" + searchUrl);            Document listDoc = CrawlShopHelper.getWebByJsoup(searchUrl);            if (null == listDoc)            {                System.out.println("注意:网络可能出现问题，或者网页发生变化，请检查.\n");                return;            }            if (listDoc.select("location").select("lat").hasText())            {                String latitude  = listDoc.select("location").first().select("lat").first().text();                String longitude = listDoc.select("location").first().select("lng").first().text();                System.out.println("获取" + aShopInfo.getCnName() + "坐标成功.");                System.out.println("Google纬度为: " + latitude);                System.out.println("Google经度为: " + longitude);                System.out.println("\n");                aShopInfo.setgLat(latitude);                aShopInfo.setgLng(longitude);            }            else            {                System.out.println("未取到google坐标");            }        }        catch (Exception ex)        {            logger.error("获取Goole坐标出错" + ex);            ex.printStackTrace();        }        return;    }}/*****************************************************************************    Class Name: CrawlFantongDishes        Author: Yangzheng   Description: 下载图片类       Caution:  --------------------------------------------------------------------------        Date          Author             Description     2013/2/25       Yangzheng          Created Class*****************************************************************************/class CrawlFantongDishes implements Runnable{    private static Logger logger = LogManager.getLogger(CrawlDianpingDishImgs.class.getName());    //本线程待执行的任务列表，你也可以指为任务索引的起始值    private City aCity;    private ArrayList<ShopInfo> subShopList = null;    private String IMG_DIR;    private DataBaseHelper DBHelper    = new DataBaseHelper();    private CrawlHelper CrawlImgHelper = new CrawlHelper();    public CrawlFantongDishes(City aCity, ArrayList<ShopInfo> subShopList)    {        this.aCity = aCity;        this.subShopList = subShopList;        this.IMG_DIR = Config.IMG_DIR;    }    public void run()    {        for (ShopInfo aShop : subShopList)        {            // 没有使用统一的标志位            if (!aShop.getDishCrawledFlag())            {                Fantong_saveShopDishImgs(aCity, aShop);            }        }        // 更新进度标志位        aCity.decDishCrawlThreadCount();    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_saveShopDishImgs            Author: Yangzheng       Description: 下载图片             Input: City aCity                    ShopInfo aShop            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_saveShopDishImgs(City aCity, ShopInfo aShop)    {        String dishPath = "/86/g3" + "/" + aShop.getCityId() + "/" + aShop.getAreaId() +                          "/dishes" + "/" + aShop.getShopId();        String dishOriginUrl = null;        String dishMiddleUrl = null;        String dishOriginPicName = null;        String dishMiddlePicName = null;        try        {            for (Dish aDish : aShop.getDishList())            {                System.out.println(" 正在下载" + aCity.getCnName() + aShop.getCnName() + "商户ID为: " + aShop.getShopId() + "的图片" );                // 分离初始图片地址，为后续组合新地址做准备                dishOriginUrl = aDish.getDishPicUrl();                if (null != dishOriginUrl)                {                    // 创建图片名                    dishOriginPicName = aDish.getDishId() + "_origin.jpg";                    // 保存图片的本地路径                    aDish.setDishPicPath(dishPath + "/" + dishOriginPicName);                    // 下载图片并保存                    Fantong_dowloadShopDishImgs(dishOriginPicName, dishOriginUrl, dishPath);                }                // 分离初始图片地址，为后续组合新地址做准备                dishMiddleUrl = aDish.getDishMiddlePicUrl();                if (null != dishMiddleUrl)                {                    // 创建图片名                    dishMiddlePicName = aDish.getDishId() + "_middle.jpg";                    // 保存图片的本地路径                    aDish.setDishMiddlePicPath(dishPath + "/" + dishMiddlePicName);                    // 下载图片并保存                    Fantong_dowloadShopDishImgs(dishMiddlePicName, dishMiddleUrl, dishPath);                }            }            //设置标志位            aShop.setDishCrawledFlag(true);        }        catch (Exception ex)        {            logger.error("下载图片文件出错" + ex);            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: CrawlFantong.Fantong_dowloadShopDishImgs            Author: Yangzheng       Description: 下载文件流             Input: String imgName                    String imgUrl                    String imgPath            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void Fantong_dowloadShopDishImgs(String imgName, String imgUrl, String imgPath) throws Exception    {        BufferedOutputStream imgOut = null;        try        {            byte[] dishImgBytes = CrawlImgHelper.getImgByHttpclientGet(imgUrl);            // 保存图片到本地            if (dishImgBytes.length > 0)            {                // 创建文件夹                imgPath = IMG_DIR + imgPath;                File fileDir = new File(imgPath);                fileDir.setWritable(true, false);                fileDir.mkdirs();                imgOut = new BufferedOutputStream(new FileOutputStream(imgPath + "/" + imgName));                imgOut.write(dishImgBytes);                imgOut.flush();            }        }        catch (Exception ex)        {            logger.error("下载图片文件出错" + ex);            ex.printStackTrace();        }        finally        {            if (imgOut != null)            {                imgOut.close();            }        }        return;    }}