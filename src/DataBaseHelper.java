import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.sql.*;import java.util.ArrayList;import java.util.List;// 数据库类public class DataBaseHelper{    private static Logger logger = LogManager.getLogger(DataBaseHelper.class.getName());    private static String createShopSqlItems = " (shop_id int(11), city_id int(11), area_id int(11), " +            " circle_id int(11), line_id int(11), cn_name text, en_name text, " +            " tiny_name text, shop_code text, b_lat text, b_lng text, g_lat text, g_lng text, " +            " logo_url text, logo_path text, comm_star text, taste_star text, " +            " env_star text, service_star text, cuisine_style text, per_cost text, " +            " address text, telphone text, business_hours text,  bus_line text, " +            " recommend_dishes text, introduction text, special_service text, menu_id int(11), " +            " PRIMARY KEY (shop_id)) ";    private static String createAreaSqlItems = " (area_id int(11), city_id int(11), cn_name text, en_name text, " +            " area_abr text, shop_num int(11), baidu_area_code text, " +            " dianping_area_code text, fantong_area_code text, " +            " PRIMARY KEY (area_id)) ";    private static String createCircleSqlItems = " (circle_id int(11), city_id int(11), area_id int(11), " +            " cn_name text, en_name text, circle_abr text, shop_num int(11), " +            " baidu_circle_code text, dianping_circle_code text, fantong_circle_code text, " +            " PRIMARY KEY (circle_id)) ";    private static String user     = "user";    private static String database = "yourdatabase";    private static String pass     = "yourdatabasepassword";    public static void DB_setUser(String myUser)    {        user = myUser;    }    public static String DB_getUser()    {        return user;    }    public static void DB_setDatabase(String mayDatabase)    {        database = mayDatabase;    }    public static String DB_getDatabase()    {        return database;    }    public static void DB_setPass(String myPass)    {        pass = myPass;    }    public static String DB_getPass()    {        return pass;    }    /*****************************************************************************     Function Name: DataBaseHelper.getConnection            Author: Yangzheng       Description: 连接数据库             Input: NONE            Output: NONE            Return: Connection           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private static Connection getConnection()    {        Connection connection = null;        // 以下初始数据应该设置为private static 型吧?        String url      = "jdbc:mysql://localhost:3306/";        String driver   = "com.mysql.jdbc.Driver";        String charSet  = "?characterEncoding=UTF-8";        String user     = DataBaseHelper.user;        String database = DataBaseHelper.database;        String pass     = DataBaseHelper.pass;        try        {            // 加载驱动程序            Class.forName(driver);            // 建立到数据库的链接            connection = DriverManager.getConnection(url + database + charSet, user, pass);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return connection;    }    /*****************************************************************************     Function Name: DataBaseHelper.closeConnAndStatement            Author: Yangzheng       Description: 关闭连接             Input: Connection connection                    PreparedStatement preStatement            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    private static void closeConnAndStatement(Connection connection, PreparedStatement preStatement)    {        if (preStatement != null)        {            try            {                preStatement.close();            }            catch (SQLException ex)            {                ex.printStackTrace();            }        }        if (connection != null)        {            try            {                connection.close();            }            catch (SQLException ex)            {                ex.printStackTrace();            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.getBaiduCityIdByName            Author: Yangzheng       Description: 根据城市名从数据库中取得百度城市ID             Input: String cityName            Output: NONE            Return: int           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public int getBaiduCityIdByName(String cityName)    {        int baiduCityId = 0;        PreparedStatement preStatement = null;        ResultSet results = null;        String table = "city";        String sql = "select * from " + table + " where cn_name = ?";        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                preStatement.setString(1, cityName);                results = preStatement.executeQuery();                while (results.next())                {                    // "baidu_city_id"                    baiduCityId = results.getInt(7);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }        return baiduCityId;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveBaiduIDToMySQL            Author: Yangzheng       Description: 将百度的城市ID数据保存到数据库             Input: List<City> cityList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public static void saveBaiduIDToMySQL(List<City> cityList)    {        // 这里就用最原始的方法获得数据库连接了。        // 使用shiyu的数据库        Connection connection = null;        PreparedStatement statement = null;        String url = "jdbc:mysql://localhost:3306/";        String database = "shiyu";        String driver = "com.mysql.jdbc.Driver";        String user = "root";        String pass = "123";        try        {            // 加载驱动程序            Class.forName(driver);            // 建立到数据库的链接            connection = DriverManager.getConnection(url + database, user, pass);            String updateSql = "update city set baidu_city_id = ? where en_name = ?";            statement = connection.prepareStatement(updateSql);            for (City city : cityList)            {                // 设置baidu城市ID                statement.setInt(1, city.getBaiduCityId());                // 设置城市英文                statement.setString(2, city.getEnName());                System.out.println(city.getCnName() + "Update OK!");                if (statement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                statement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, statement);        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.getShopAddressById            Author: Yangzheng       Description: 从(香港)城市数据库中获取商户ID 地址             Input: ArrayList<ShopCoords> shopLatLngList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public void getShopAddressById(ArrayList<ShopCoords> shopLatLngList)    {        int shopId = 0;        String shopAddress = null;        String shopName = null;        PreparedStatement preStatement = null;        ResultSet results = null;        String table = "restrant_341";        String sql = "select shop_id, address, cn_name from " + table;        ShopCoords aShopInfo = null;        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                results = preStatement.executeQuery();                while (results.next())                {                    aShopInfo = new ShopCoords();                    shopId = results.getInt(1);                    shopAddress = results.getString(2);                    shopName = results.getString(3);                    if (shopId == 0 || shopAddress == null)                    {                        continue;                    }                    aShopInfo.setShopId(shopId);                    aShopInfo.setAddress(shopAddress);                    aShopInfo.setShopName(shopName);                    shopLatLngList.add(aShopInfo);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.getCityIdByName            Author: Yangzheng       Description: 根据城市名从数据库中取得城市ID             Input: String cityName            Output: NONE            Return: int           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public int getCityIdByName(String cityName)    {        int cityId = 0;        PreparedStatement preStatement = null;        ResultSet results = null;        String table = "city";        String sql = "select * from " + table + " where cn_name like ?";        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                preStatement.setString(1, cityName + "%");                results = preStatement.executeQuery();                while (results.next())                {                    cityId = results.getInt(1);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }        if (0 == cityId)        {            System.out.println("\n 数据中不存在" + cityName + "的城市ID");        }        else        {            System.out.println("\n 从数据库中取到" + cityName + "城市ID为:" + cityId);        }        return cityId;    }    /*****************************************************************************     Function Name: DataBaseHelper.getCityNameById            Author: Yangzheng       Description: 根据城市ID从数据库中取得城市名             Input: int cityId            Output: NONE            Return: String           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public String getCityNameById(int cityId)    {        String cityName = null;        PreparedStatement preStatement = null;        ResultSet results = null;        String table = "city";        String sql = "select * from " + table + " where city_id = ?";        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                preStatement.setInt(1, cityId);                results = preStatement.executeQuery();                while (results.next())                {                    cityName = results.getString(4);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }        System.out.println("取到城市名为:" + cityName);        return cityName;    }    /*****************************************************************************     Function Name: DataBaseHelper.checkIsFieldInTable            Author: Yangzheng       Description: 检查指定表中是否存在指定字段             Input: String tableName                    String fieldName            Output: NONE            Return: boolean           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/10       Yangzheng         Created Function    *****************************************************************************/    public boolean checkIsFieldInTable(String tableName, String fieldName)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String DBFieldName = null;        boolean isFieldIn  = false;        String sql = " describe " + tableName + " " + fieldName;        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                results      = preStatement.executeQuery();                while (results.next())                {                    DBFieldName = results.getString(1);                    if (!fieldName.equals(DBFieldName))                    {                        isFieldIn = false;                        System.out.println(tableName + "不存在字段: " + fieldName);                    }                    else                    {                        isFieldIn = true;                        System.out.println(tableName + "已经存在字段: " + fieldName);                    }                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }        return isFieldIn;    }    /*****************************************************************************     Function Name: DataBaseHelper.addFieldToTable            Author: Yangzheng       Description: 在指定表中增加字段             Input: String tableName                    String fieldName                    String fieldType                    String position            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/10       Yangzheng         Created Function    *****************************************************************************/    public void addFieldToTable(String tableName, String fieldName, String fieldType, String position)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String DBFieldName = null;        boolean isFieldIn  = true;        String sql = " alter table " + tableName +                     " add " + fieldName +                     " " + fieldType + " after " + position;        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                if (preStatement.executeUpdate() < 0)                {                    logger.error(tableName + "增加字段" + fieldName + "错误");                    throw new Exception(tableName + "增加" + fieldName + "字段错误");                }                else                {                    System.out.println(tableName + "成功增加字段: " + fieldName);                }            }            catch (Exception ex)            {                logger.error(tableName + "增加字段" + fieldName + "错误");                logger.error(ex);                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.deleteFieldToTable            Author: Yangzheng       Description: 删除指定表的字段             Input: String tableName                    String fieldName            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/10       Yangzheng         Created Function    *****************************************************************************/    public void deleteFieldToTable(String tableName, String fieldName)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String DBFieldName = null;        boolean isFieldIn  = true;        String sql = " alter table " + tableName +                     " drop colomn " + fieldName;        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                if (preStatement.executeUpdate() < 0)                {                    logger.error(tableName + "删除字段" + fieldName + "错误");                    throw new Exception(tableName + "删除" + fieldName + "字段错误");                }                else                {                    System.out.println(tableName + "成功删除字段: " + fieldName);                }            }            catch (Exception ex)            {                logger.error(tableName + "删除字段" + fieldName + "错误");                logger.error(ex);                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.getShopTables            Author: Yangzheng       Description: 获取商户数据表             Input: ArrayList<ShopTable> shopTableList            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/7/07       Yangzheng         Created Function    *****************************************************************************/    public void getShopTables(ArrayList<ShopTable> shopTableList)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String shopTableName = null;        String sql = "show tables like '%shop_%'";        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                results      = preStatement.executeQuery();                while (results.next())                {                    shopTableName = results.getString(1);                    System.out.println(" 得到表名: " + shopTableName);                    ShopTable aShopTable = new ShopTable();                    // 解析为CityID                    String cityId = shopTableName.substring(7);                    // 获取对应ID的城市名并存储                    aShopTable.setCityName(getCityNameById(Integer.parseInt(cityId)));                    aShopTable.setCityId(Integer.parseInt(cityId));                    aShopTable.setShopTableName(shopTableName);                    shopTableList.add(aShopTable);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.getBlankCoordShops            Author: Yangzheng       Description: 取出百度坐标为空的商户             Input: ShopTable aShopTable            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/7/29       Yangzheng         Created Function    *****************************************************************************/    public void getBlankCoordShops(ShopTable aShopTable)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String shopTableName = aShopTable.getShopTableName();        String sql = "select * from " + shopTableName + " where b_lat = '' and b_lng = '' ";        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                results      = preStatement.executeQuery();                while (results.next())                {                    ShopInfo aShop     = new ShopInfo();                    int    shopId      = results.getInt(1);                    int    cityId      = results.getInt(2);                    String shopName    = results.getString(6);                    String shopAddress = results.getString(22);                    if (shopId == 0 || shopAddress == null)                    {                        continue;                    }                    aShop.setShopId(shopId);                    aShop.setCityId(cityId);                    aShop.setCnName(shopName);                    aShop.setAddress(shopAddress);                    aShopTable.getShopList().add(aShop);                    // System.out.println(" 取到商户: " + shopName);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.getAllShops            Author: Yangzheng       Description: 获取商户表下所有商户             Input: ShopTable aShopTable            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/10       Yangzheng         Created Function    *****************************************************************************/    public void getAllShops(ShopTable aShopTable)    {        PreparedStatement preStatement = null;        ResultSet results = null;        String shopTableName = aShopTable.getShopTableName();        String sql = "select * from " + shopTableName + " where !isnull(b_lat) and isnull(m_lat) ";  //b_lat <> 'null' and        Connection connection = getConnection();        if (connection != null)        {            try            {                preStatement = connection.prepareStatement(sql);                results      = preStatement.executeQuery();                while (results.next())                {                    ShopInfo aShop     = new ShopInfo();                    int    shopId      = results.getInt("shop_id");                    int    cityId      = results.getInt("city_id");                    String shopName    = results.getString("cn_name");                    String shopAddress = results.getString("address");                    String b_lat       = results.getString("b_lat");                    String b_lng       = results.getString("b_lng");                    if (shopId == 0 || shopName == null)                    {                        continue;                    }                    aShop.setShopId(shopId);                    aShop.setCityId(cityId);                    aShop.setCnName(shopName);                    aShop.setAddress(shopAddress);                    aShop.setbLat(b_lat);                    aShop.setbLng(b_lng);                    aShopTable.getShopList().add(aShop);                    // System.out.println(" 取到商户: " + shopName);                }            }            catch (SQLException ex)            {                ex.printStackTrace();            }            finally            {                closeConnAndStatement(connection, preStatement);            }        }    }    /*****************************************************************************     Function Name: DataBaseHelper.saveShopsCoordsToMySQL            Author: Yangzheng       Description: 保存商户坐标             Input: ShopTable aShopTable            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/7/6       Yangzheng         Created Function    *****************************************************************************/    public void saveShopsCoordsToMySQL(ShopTable aShopTable)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = aShopTable.getShopTableName();        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置更新商户坐标sql语句            String saveShopSql = " update " + shopTableName +                                 " set b_lat = ?, b_lng = ? " +                                 " where shop_id = ? ";            preStatement = connection.prepareStatement(saveShopSql);            for (ShopInfo aShop : aShopTable.getShopList())            {                preStatement.setString(1, aShop.getbLat());                preStatement.setString(2, aShop.getbLng());                preStatement.setInt(3, aShop.getShopId());      // 设置商户ID                System.out.println(" 商户ID: " + aShop.getShopId() + " " + aShop.getCnName() + "更新坐标成功.");                System.out.println(" 坐标为: " + aShop.getbLat() + "   " + aShop.getbLng());                System.out.println("\n");                if (preStatement.executeUpdate() < 0)                {                    logger.error("保存商户数据错误");                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            logger.error("保存商户数据错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveShopsMultiCoordsToMySQL            Author: Yangzheng       Description: 更新商户的gps坐标 火星坐标 商圈             Input: ShopTable aShopTable            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/8/10       Yangzheng         Created Function    *****************************************************************************/    public void saveShopsMultiCoordsToMySQL(ShopTable aShopTable)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = aShopTable.getShopTableName();        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置更新商户坐标sql语句            String saveShopSql = " update " + shopTableName +                                 " set m_lat = ?, m_lng = ?, " +                                 " gps_lat = ?, gps_lng = ?, " +                                 " circle = ? " +                                 " where shop_id = ? ";            preStatement = connection.prepareStatement(saveShopSql);            for (ShopInfo aShop : aShopTable.getShopList())            {                preStatement.setString(1, aShop.getMLat());                preStatement.setString(2, aShop.getMLng());                preStatement.setString(3, aShop.getGpsLat());                preStatement.setString(4, aShop.getGpsLng());                preStatement.setString(5, aShop.getCircle());   // 设置所属商圈                preStatement.setInt(6, aShop.getShopId());      // 设置商户ID                System.out.println(" 正在保存表" + aShopTable.getShopTableName() + "的数据:");                System.out.println(" 商户ID: " + aShop.getShopId() + " " + aShop.getCnName() + "更新坐标成功.");                System.out.println(" 火星坐标为: " + aShop.getMLat() + "   " + aShop.getMLng());                System.out.println(" GPS坐标为: " + aShop.getGpsLat() + "   " + aShop.getGpsLng());                System.out.println(" 更新商圈为: " + aShop.getCircle());                System.out.println("\n");                if (preStatement.executeUpdate() < 0)                {                    logger.error("保存商户数据错误");                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            logger.error("保存商户数据错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveBaiduToMySQL            Author: Yangzheng       Description: 将百度的城市数据保存到数据库             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public void saveBaiduToMySQL(City aCity)    {        try        {            saveBaiduAreaToMySQL(aCity);            saveBaiduCircleToMySQL(aCity);            saveBaiduShopToMySQL(aCity);        }        catch (Exception ex)        {            ex.printStackTrace();        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveBaiduAreaToMySQL            Author: Yangzheng       Description: 保存百度区域数据到数据库             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    private void saveBaiduAreaToMySQL(City aCity)    {        String areaTableName = " area_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            // 连接数据库            connection = getConnection();            // 设置建区域表语句            String creatAreaSql = " create table " + areaTableName + createAreaSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatAreaSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("创建区域表错误!");            }            preStatement.clearParameters();            // 设置保存商户sql语句            String saveAreaSql = " insert into " + areaTableName +                                 " (area_id, city_id, cn_name, baidu_area_code) " +                                 " values (?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveAreaSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                preStatement.setInt(1, aArea.getAreaId());                preStatement.setInt(2, aArea.getCityId());                preStatement.setString(3, aArea.getAreaCnName());                preStatement.setString(4, aArea.getAreaCode());                System.out.println("区域ID: " + aArea.getAreaId() + " " + aArea.getAreaCnName() + "更新成功.");                if (preStatement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveBaiduCircleToMySQL            Author: Yangzheng       Description: 保存商圈信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    private void saveBaiduCircleToMySQL(City aCity)    {        String circleTableName = " circle_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            // 连接数据库            connection = getConnection();            // 设置建区域表语句            String creatCirlceSql = " create table " + circleTableName + createCircleSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatCirlceSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("创建商圈表错误!");            }            preStatement.clearParameters();            // 设置保存商圈sql语句            String saveCircleSql = " insert into " + circleTableName +                                   " (circle_id, city_id, area_id, cn_name, baidu_circle_code) " +                                   " values (?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveCircleSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                for (CircleInfo aCircle : aArea.getCircleInfoList())                {                    preStatement.setInt(1, aCircle.getCircleId());                    preStatement.setInt(2, aCircle.getCityId());                    preStatement.setInt(3, aCircle.getAreaId());                    preStatement.setString(4, aCircle.getCircleName());                    preStatement.setString(5, aCircle.getCircleCode());                    System.out.println("商圈ID: " + aCircle.getCircleId() + " " + aCircle.getCircleName() + "更新成功.");                    if (preStatement.executeUpdate() < 0)                    {                        throw new Exception("保存数据错误!");                    }                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }    }    /*****************************************************************************     Function Name: DataBaseHelper.saveBaiduShopToMySQL            Author: Yangzheng       Description: 保存商户数据             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    private void saveBaiduShopToMySQL(City aCity)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = " shop_" + aCity.getCityId();        try        {            // 连接数据库            connection = getConnection();            // 设置建表语句            String creatShopSql = " create table " + shopTableName + createShopSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatShopSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("创建商户表错误!");            }            preStatement.clearParameters();            // 设置保存商户sql语句            String saveShopSql = " insert into " + shopTableName +                                 " (shop_id, city_id, area_id, circle_id, " +                                 " cn_name, cuisine_style, per_cost, address," +                                 " business_hours, recommend_dishes, introduction, " +                                 " bus_line, special_service, comm_star, " +                                 " taste_star, env_star, service_star, telphone, " +                                 " tiny_name, shop_code, b_lat, b_lng) " +                                 " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveShopSql);            for (ShopInfo aShop : aCity.getShopList())            {                preStatement.setInt(1, aShop.getShopId());      // 设置商户ID                preStatement.setInt(2, aShop.getCityId());      // 设置城市ID                preStatement.setInt(3, aShop.getAreaId());                preStatement.setInt(4, aShop.getCircleId());                preStatement.setString(5, aShop.getCnName());                preStatement.setString(6, aShop.getCuisineStyle());                preStatement.setString(7, aShop.getPerCost());                preStatement.setString(8, aShop.getAddress());                preStatement.setString(9, aShop.getBusinessHours());                preStatement.setString(10, aShop.getRecommendDishes());                preStatement.setString(11, aShop.getIntroduction());                preStatement.setString(12, aShop.getBusLine());                preStatement.setString(13, aShop.getCharacService());                preStatement.setString(14, aShop.getComprehensiveStar());                preStatement.setString(15, aShop.getTasteStar());                preStatement.setString(16, aShop.getEnvironmentStar());                preStatement.setString(17, aShop.getServiceStar());                preStatement.setString(18, aShop.getTelephone());                preStatement.setString(19, aShop.getCnTinyName());                preStatement.setString(20, aShop.getShopCode());                preStatement.setString(21, aShop.getbLat());                preStatement.setString(22, aShop.getbLng());                //preStatement.setString(23, aShop.getShopLogoPath());                System.out.println("商户ID: " + aShop.getShopId() + " " + aShop.getCnName() + "更新成功.");                if (preStatement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************    Function Name: DataBaseHelper.saveBaiduDishesToMySQL           Author: Yangzheng      Description: 保存百度菜肴和图片            Input: City aCity           Output: NONE           Return: NONE          Caution:     --------------------------------------------------------------------------           Date          Author             Description        2013/3/1       Yangzheng         Created Function    *****************************************************************************/    public void saveBaiduDishesToMySQL(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "menu_" + aCity.getCityId();        try        {            // 建立到数据库的链接            connection = getConnection();            // 创建表            // 设置建表语句            String createSql = " create table " + table +                               " (dish_id int(11), shopId int(11), cn_dish_name text, " +                               " en_dish_name text, price text, cuisine_style text, " +                               " picInitial text, picTiny text, picSmall text, picMiddle text, picLarge text, " +                               " is_recommended int(11), dish_method text, " +                               " PRIMARY KEY (dish_id)) ";            preStatement = connection.prepareStatement(createSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("创建表错误!");            }            preStatement.clearParameters();            // 插入数据            // 设置插入sql语句            String saveSql = " insert into " + table +                             " (dish_id, shopId, is_recommended, " +                             " cn_dish_name, picInitial, picLarge) " + // , picLarge                             " values (?, ?, ?, ?, ?, ?)"; //, ?            preStatement = connection.prepareStatement(saveSql);            for (ShopInfo aShop : aCity.getShopList())            {                for (Dish aDish : aShop.getDishList())                {                    preStatement.setInt(1, aDish.getDishId());                    preStatement.setInt(2, aShop.getShopId());                    preStatement.setInt(3, aDish.getIsRecommendDish());                    preStatement.setString(4, aDish.getDishName());                    preStatement.setString(5, aDish.getDishPicPath());                    preStatement.setString(6, aDish.getDishLargePicPath());                    if (preStatement.executeUpdate() < 0)                    {                        throw new Exception("保存数据错误!");                    }                    System.out.println("\n菜肴ID: " + aDish.getDishId() + "菜名: " + aDish.getDishName());                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveDianpingRegionsToMySQL            Author: Yangzheng       Description: 保存区域信息             Input: City aCity            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/20       Yangzheng         Created Function    *****************************************************************************/    public void saveDianpingRegionsToMySQL(City aCity)    {        try        {            logger.entry();            createDianpingAreaTable(aCity);            saveDianpingAreaToMySQL(aCity);            createDianpingCircleTable(aCity);            saveDianpingCircleToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("保存区域信息失败" + ex);            ex.printStackTrace();        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.createDianpingAreaTable            Author: Yangzheng       Description: 创建区域表             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       Yangzheng         Created Function    *****************************************************************************/    private void createDianpingAreaTable(City aCity)    {        String areaTableName = " area_d_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        ResultSet resultTables = null;        String[] types = { "TABLE" };        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置删除区域表语句            String dropAreaSql = " drop table if exists " + areaTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropAreaSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除区域表错误!");                throw new Exception("删除区域表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "区域表成功!");            }            preStatement.clearParameters();            // 设置建区域表语句            String createAreaSql = " create table " + areaTableName + createAreaSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(createAreaSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建区域表错误!");                throw new Exception("创建区域表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "区域表成功!");            }        }        catch (Exception ex)        {            logger.error("区域表处理失败" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveDianpingAreaToMySQL            Author: Yangzheng       Description: 保存百度区域数据到数据库             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    private void saveDianpingAreaToMySQL(City aCity)    {        String areaTableName = " area_d_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            // 连接数据库            connection = getConnection();            // 设置保存商户sql语句            String saveAreaSql = " insert into " + areaTableName +                                 " (area_id, city_id, cn_name, dianping_area_code) " +                                 " values (?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveAreaSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                preStatement.setInt(1, aArea.getAreaId());                preStatement.setInt(2, aArea.getCityId());                preStatement.setString(3, aArea.getAreaCnName());                preStatement.setString(4, aArea.getAreaCode());                System.out.println("区域ID: " + aArea.getAreaId() + " " + aArea.getAreaCnName() + "更新成功.");                if (preStatement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************         Function Name: createDianpingCircleTable                Author: Yangzheng           Description: 创建商圈表                 Input: City aCity                Output: NONE                Return: private               Caution:          --------------------------------------------------------------------------                Date          Author             Description             2013/3/18       Yangzheng         Created Function        *****************************************************************************/    private void createDianpingCircleTable(City aCity)    {        String circleTableName = " circle_d_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        ResultSet resultTables = null;        String[] types = { "TABLE" };        try        {            logger.entry();            // 连接数据库            connection = getConnection();            //DatabaseMetaData dbMetaData = connection.getMetaData();            //resultTables = dbMetaData.getTables(database, null, circleTableName, types);            //if (!resultTables.next())            // 设置删除商圈表语句            String dropCircleSql = " drop table if exists " + circleTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropCircleSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除商圈失败");                throw new Exception("删除商圈表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "商圈表成功!");            }            preStatement.clearParameters();            // 设置建区域表语句            String creatCirlceSql = " create table " + circleTableName + createCircleSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatCirlceSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建商圈表失败");                throw new Exception("创建商圈表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "商圈表成功!");            }        }        catch (Exception ex)        {            logger.error("创建商圈表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveDianpingCircleToMySQL            Author: Yangzheng       Description: 保存商圈信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    private void saveDianpingCircleToMySQL(City aCity)    {        String circleTableName = " circle_d_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置保存商圈sql语句            String saveCircleSql = " insert into " + circleTableName +                                   " (circle_id, city_id, area_id, cn_name, dianping_circle_code) " +                                   " values (?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveCircleSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                for (CircleInfo aCircle : aArea.getCircleInfoList())                {                    preStatement.setInt(1, aCircle.getCircleId());                    preStatement.setInt(2, aCircle.getCityId());                    preStatement.setInt(3, aCircle.getAreaId());                    preStatement.setString(4, aCircle.getCircleName());                    preStatement.setString(5, aCircle.getCircleCode());                    System.out.println("商圈ID: " + aCircle.getCircleId() + " " + aCircle.getCircleName() + "更新成功.");                    if (preStatement.executeUpdate() < 0)                    {                        logger.error("保存商圈数据失败");                        throw new Exception("保存数据错误!");                    }                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            logger.error("处理商圈表失败" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.createDianpingShopTable            Author: Yangzheng       Description: 创建商户表             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       Yangzheng         Created Function    *****************************************************************************/    public void createDianpingShopTable(City aCity)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = " shop_d_" + aCity.getCityId();        ResultSet resultTables = null;        String[] types = { "TABLE" };        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置删除表语句            String dropShopSql = " drop table if exists " + shopTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropShopSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("删除商户表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "商户表成功!");            }            preStatement.clearParameters();            // 设置建表语句            String creatShopSql = " create table " + shopTableName + createShopSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatShopSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建商户表失败");                throw new Exception("创建商户表错误!");            }            System.out.println("创建" + aCity.getCnName() + "商户表成功!");        }        catch (Exception ex)        {            logger.error("创建商户表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveDianpingShopToMySQL            Author: Yangzheng       Description: 保存商户数据             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    public void saveDianpingShopsToMySQL(City aCity)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = " shop_d_" + aCity.getCityId();        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置保存商户sql语句            String saveShopSql = " insert into " + shopTableName +                                 " (shop_id, city_id, area_id, circle_id, " +                                 " cn_name, cuisine_style, per_cost, address," +                                 " business_hours, recommend_dishes, introduction, " +                                 " bus_line, special_service, comm_star, " +                                 " taste_star, env_star, service_star, telphone, " +                                 " tiny_name, shop_code, b_lat, b_lng, logo_path, g_lat, g_lng) " +                                 " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveShopSql);            for (ShopInfo aShop : aCity.getShopList())            {                preStatement.setInt(1, aShop.getShopId());      // 设置商户ID                preStatement.setInt(2, aShop.getCityId());      // 设置城市ID                preStatement.setInt(3, aShop.getAreaId());                preStatement.setInt(4, aShop.getCircleId());                preStatement.setString(5, aShop.getCnName());                preStatement.setString(6, aShop.getCuisineStyle());                preStatement.setString(7, aShop.getPerCost());                preStatement.setString(8, aShop.getAddress());                preStatement.setString(9, aShop.getBusinessHours());                preStatement.setString(10, aShop.getRecommendDishes());                preStatement.setString(11, aShop.getIntroduction());                preStatement.setString(12, aShop.getBusLine());                preStatement.setString(13, aShop.getCharacService());                preStatement.setString(14, aShop.getComprehensiveStar());                preStatement.setString(15, aShop.getTasteStar());                preStatement.setString(16, aShop.getEnvironmentStar());                preStatement.setString(17, aShop.getServiceStar());                preStatement.setString(18, aShop.getTelephone());                preStatement.setString(19, aShop.getCnTinyName());                preStatement.setString(20, aShop.getShopCode());                preStatement.setString(21, aShop.getbLat());                preStatement.setString(22, aShop.getbLng());                preStatement.setString(23, aShop.getShopLogoPath());                preStatement.setString(24, aShop.getgLat());                preStatement.setString(25, aShop.getgLng());                System.out.println("商户ID: " + aShop.getShopId() + " " + aShop.getCnName() + "更新成功.");                if (preStatement.executeUpdate() < 0)                {                    logger.error("保存商户数据错误");                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            logger.error("保存商户数据错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.createDianpingDishTable            Author: YangZheng       Description: 创建菜谱表             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       YangZheng         Created Function    *****************************************************************************/    public void createDianpingDishTable(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "menu_d_" + aCity.getCityId();        try        {            logger.entry();            // 建立到数据库的链接            connection = getConnection();            // 设置删除菜单表语句            String dropDishSql = " drop table if exists " + table;            // 加入sql语句            preStatement = connection.prepareStatement(dropDishSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除菜单表失败");                throw new Exception("删除菜单表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "菜单表成功!");            }            preStatement.clearParameters();            // 创建表 设置建表语句            String createSql = " create table " + table +                               " (dish_id int(11), shopId int(11), cn_dish_name text, " +                               " en_dish_name text, price text, cuisine_style text, " +                               " picInitial text, picTiny text, picSmall text, picMiddle text, picLarge text, " +                               " is_recommended int(11), dish_method text, " +                               " PRIMARY KEY (dish_id)) ";            preStatement = connection.prepareStatement(createSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建菜单表失败");                throw new Exception("创建表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "菜单表");            }        }        catch (Exception ex)        {            logger.error("创建菜单表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveDianpingDishesToMySQL            Author: Yangzheng       Description: 保存菜谱到数据库             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public void saveDianpingDishesToMySQL(City aCity)//, ArrayList<ShopInfo> shopList)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "menu_d_" + aCity.getCityId();        try        {            // 建立到数据库的链接            connection = getConnection();            // 插入数据, 设置插入sql语句            String saveSql = " insert into " + table +                             " (dish_id, shopId, cn_dish_name, " +                             " picInitial, picTiny, picSmall, is_recommended) " + //, picMiddle , picLarge                             " values (?, ?, ?, ?, ?, ?, ?)"; //, ?, ?            preStatement = connection.prepareStatement(saveSql);            for (ShopInfo aShop : aCity.getShopList())//shopList            {                for (Dish aDish : aShop.getDishList())                {                    preStatement.setInt(1, aDish.getDishId());                    preStatement.setInt(2, aShop.getShopId());                    preStatement.setString(3, aDish.getDishName());                    preStatement.setString(4, aDish.getDishPicPath());                    preStatement.setString(5, aDish.getDishTinyPicPath());                    preStatement.setString(6, aDish.getDishSmallPicPath());                    preStatement.setInt(7, aDish.getIsRecommendDish());                    //preStatement.setString(7, aDish.getDishMiddlePicPath());                    //preStatement.setString(8, aDish.getDishLargePicPath());                    if (preStatement.executeUpdate() < 0)                    {                        logger.error("保存商户图片数据失败");                        throw new Exception("保存数据错误!");                    }                    System.out.println(" 更新数据库 菜肴ID: " + aDish.getDishId() + "菜名: " + aDish.getDishName());                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            logger.error("保存商户图片数据错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************    Function Name: DataBaseHelper.saveDianpingLogosToMySQL           Author: Yangzheng      Description: 将logo数据更新到数据库            Input: City aCity           Output: NONE           Return: NONE          Caution:     --------------------------------------------------------------------------           Date          Author             Description        2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public void saveDianpingLogosToMySQL(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "shop_d_" + aCity.getCityId();        try        {            logger.entry();            // 建立到数据库的链接            connection = getConnection();            // 设置建表语句            String updateSql = "update " + table + " set logo_path = ? where shop_id = ?";            preStatement = connection.prepareStatement(updateSql);            for (ShopInfo aShop : aCity.getShopList())            {                preStatement.setString(1, aShop.getShopLogoPath());                preStatement.setInt(2, aShop.getShopId());                if (preStatement.executeUpdate() < 0)                {                    logger.error("更新商户logo失败");                    throw new Exception("保存数据错误!");                }                System.out.println("更新商户ID: " + aShop.getShopId() + "的Logo.\n路径为: " + aShop.getShopLogoPath());                preStatement.clearParameters();            }        }        catch (Exception ex)        {            logger.error("更新商户logo错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveFantongRegionsToMySQL            Author: Yangzheng       Description: 保存区域信息             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/23       Yangzheng         Created Function    *****************************************************************************/    public void saveFantongRegionsToMySQL(City aCity)    {        try        {            logger.entry();            createFantongAreaTable(aCity);            saveFantongAreaToMySQL(aCity);            createFantongCircleTable(aCity);            saveFantongCircleToMySQL(aCity);        }        catch (Exception ex)        {            logger.error("保存区域信息失败" + ex);            ex.printStackTrace();        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.createFantongAreaTable            Author: Yangzheng       Description: 创建区域表             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       Yangzheng         Created Function    *****************************************************************************/    private void createFantongAreaTable(City aCity)    {        String areaTableName = " area_f_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置删除区域表语句            String dropAreaSql = " drop table if exists " + areaTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropAreaSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除区域表错误!");                throw new Exception("删除区域表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "区域表成功!");            }            preStatement.clearParameters();            // 设置建区域表语句            String createAreaSql = " create table " + areaTableName + createAreaSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(createAreaSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建区域表错误!");                throw new Exception("创建区域表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "区域表成功!");            }        }        catch (Exception ex)        {            logger.error("区域表处理失败" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveFantongAreaToMySQL            Author: Yangzheng       Description: 保存区域数据             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void saveFantongAreaToMySQL(City aCity)    {        String areaTableName = " area_f_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            // 连接数据库            connection = getConnection();            // 设置保存商户sql语句            String saveAreaSql = " insert into " + areaTableName +                                 " (area_id, city_id, cn_name, fantong_area_code) " +                                 " values (?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveAreaSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                preStatement.setInt(1, aArea.getAreaId());                preStatement.setInt(2, aArea.getCityId());                preStatement.setString(3, aArea.getAreaCnName());                preStatement.setString(4, aArea.getAreaCode());                System.out.println("区域ID: " + aArea.getAreaId() + " " + aArea.getAreaCnName() + "更新成功.");                if (preStatement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************     Function Name: createFantongCircleTable            Author: Yangzheng       Description: 创建商圈表             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       Yangzheng         Created Function    *****************************************************************************/    private void createFantongCircleTable(City aCity)    {        String circleTableName = " circle_f_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置删除商圈表语句            String dropCircleSql = " drop table if exists " + circleTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropCircleSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除商圈失败");                throw new Exception("删除商圈表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "商圈表成功!");            }            preStatement.clearParameters();            // 设置建区域表语句            String creatCirlceSql = " create table " + circleTableName + createCircleSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatCirlceSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建商圈表失败");                throw new Exception("创建商圈表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "商圈表成功!");            }        }        catch (Exception ex)        {            logger.error("创建商圈表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveFantongCircleToMySQL            Author: Yangzheng       Description: 保存商圈数据             Input: City aCity            Output: NONE            Return:           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    private void saveFantongCircleToMySQL(City aCity)    {        String circleTableName = " circle_f_" + aCity.getCityId();        PreparedStatement preStatement = null;        Connection connection = null;        try        {            // 连接数据库            connection = getConnection();            // 设置保存商圈sql语句            String saveCircleSql = " insert into " + circleTableName +                                   " (circle_id, city_id, area_id, cn_name, fantong_circle_code) " +                                   " values (?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveCircleSql);            for (AreaInfo aArea : aCity.getAreaInfoList())            {                for (CircleInfo aCircle : aArea.getCircleInfoList())                {                    preStatement.setInt(1, aCircle.getCircleId());                    preStatement.setInt(2, aCircle.getCityId());                    preStatement.setInt(3, aCircle.getAreaId());                    preStatement.setString(4, aCircle.getCircleName());                    preStatement.setString(5, aCircle.getCircleCode());                    System.out.println("商圈ID: " + aCircle.getCircleId() + " " + aCircle.getCircleName() + "更新成功.");                    if (preStatement.executeUpdate() < 0)                    {                        throw new Exception("保存数据错误!");                    }                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }    }    /*****************************************************************************     Function Name: DataBaseHelper.createFantongShopTable            Author: Yangzheng       Description: 创建商户表             Input: City aCity            Output: NONE            Return: private           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       Yangzheng         Created Function    *****************************************************************************/    public void createFantongShopTable(City aCity)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = " shop_f_" + aCity.getCityId();        try        {            logger.entry();            // 连接数据库            connection = getConnection();            // 设置删除表语句            String dropShopSql = " drop table if exists " + shopTableName;            // 加入sql语句            preStatement = connection.prepareStatement(dropShopSql);            if (preStatement.executeUpdate() < 0)            {                throw new Exception("删除商户表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "商户表成功!");            }            preStatement.clearParameters();            // 设置建表语句            String creatShopSql = " create table " + shopTableName + createShopSqlItems;            // 加入sql语句            preStatement = connection.prepareStatement(creatShopSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建商户表失败");                throw new Exception("创建商户表错误!");            }            System.out.println("创建" + aCity.getCnName() + "商户表成功!");        }        catch (Exception ex)        {            logger.error("创建商户表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveFantongShopToMySQL            Author: Yangzheng       Description: 保存商户数据             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/2/28       Yangzheng         Created Function    *****************************************************************************/    public void saveFantongShopToMySQL(City aCity)    {        PreparedStatement preStatement = null;        Connection connection = null;        String shopTableName = " shop_f_" + aCity.getCityId();        try        {            // 连接数据库            connection = getConnection();            // 设置保存商户sql语句            String saveShopSql = " insert into " + shopTableName +                                 " (shop_id, city_id, area_id, circle_id, " +                                 " cn_name, cuisine_style, per_cost, address," +                                 " business_hours, recommend_dishes, introduction, " +                                 " bus_line, special_service, comm_star, " +                                 " taste_star, env_star, service_star, telphone, " +                                 " tiny_name, shop_code, b_lat, b_lng, logo_path, g_lat, g_lng) " +                                 " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";            preStatement = connection.prepareStatement(saveShopSql);            for (ShopInfo aShop : aCity.getShopList())            {                preStatement.setInt(1, aShop.getShopId());      // 设置商户ID                preStatement.setInt(2, aShop.getCityId());      // 设置城市ID                preStatement.setInt(3, aShop.getAreaId());                preStatement.setInt(4, aShop.getCircleId());                preStatement.setString(5, aShop.getCnName());                preStatement.setString(6, aShop.getCuisineStyle());                preStatement.setString(7, aShop.getPerCost());                preStatement.setString(8, aShop.getAddress());                preStatement.setString(9, aShop.getBusinessHours());                preStatement.setString(10, aShop.getRecommendDishes());                preStatement.setString(11, aShop.getIntroduction());                preStatement.setString(12, aShop.getBusLine());                preStatement.setString(13, aShop.getCharacService());                preStatement.setString(14, aShop.getComprehensiveStar());                preStatement.setString(15, aShop.getTasteStar());                preStatement.setString(16, aShop.getEnvironmentStar());                preStatement.setString(17, aShop.getServiceStar());                preStatement.setString(18, aShop.getTelephone());                preStatement.setString(19, aShop.getCnTinyName());                preStatement.setString(20, aShop.getShopCode());                preStatement.setString(21, aShop.getbLat());                preStatement.setString(22, aShop.getbLng());                preStatement.setString(23, aShop.getShopLogoPath());                preStatement.setString(24, aShop.getgLat());                preStatement.setString(25, aShop.getgLng());                System.out.println("商户ID: " + aShop.getShopId() + "\t商户名: " + aShop.getCnName() + " 更新成功.");                if (preStatement.executeUpdate() < 0)                {                    throw new Exception("保存数据错误!");                }                preStatement.clearParameters();            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.createFantongDishTable            Author: YangZheng       Description: 创建菜谱表             Input: City aCity            Output: NONE            Return: NONE           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/18       YangZheng         Created Function    *****************************************************************************/    public void createFantongDishTable(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "menu_f_" + aCity.getCityId();        try        {            logger.entry();            // 建立到数据库的链接            connection = getConnection();            // 设置删除菜单表语句            String dropDishSql = " drop table if exists " + table;            // 加入sql语句            preStatement = connection.prepareStatement(dropDishSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("删除菜单表失败");                throw new Exception("删除菜单表错误!");            }            else            {                System.out.println("删除" + aCity.getCnName() + "菜单表成功!");            }            preStatement.clearParameters();            // 创建表 设置建表语句            String createSql = " create table " + table +                               " (dish_id int(11), shopId int(11), cn_dish_name text, " +                               " en_dish_name text, price text, cuisine_style text, " +                               " picInitial text, picTiny text, picSmall text, picMiddle text, picLarge text, " +                               " is_recommended int(11), dish_method text, " +                               " PRIMARY KEY (dish_id)) ";            preStatement = connection.prepareStatement(createSql);            if (preStatement.executeUpdate() < 0)            {                logger.error("创建菜单表失败");                throw new Exception("创建表错误!");            }            else            {                System.out.println("创建" + aCity.getCnName() + "菜单表");            }        }        catch (Exception ex)        {            logger.error("创建菜单表错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }    /*****************************************************************************     Function Name: DataBaseHelper.saveFantongDishesToMySQL            Author: Yangzheng       Description: 保存菜肴             Input: City aCity            Output: NONE            Return: public           Caution:      --------------------------------------------------------------------------            Date          Author             Description         2013/3/15       Yangzheng         Created Function    *****************************************************************************/    public void saveFantongDishesToMySQL(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "menu_f_" + aCity.getCityId();        try        {            // 建立到数据库的链接            connection = getConnection();            // 插入数据            // 设置插入sql语句            String saveSql = " insert into " + table +                             " (dish_id, shopId, cn_dish_name, " +                             " picInitial, picMiddle, is_recommended) " + //, picMiddle , picLarge                             " values (?, ?, ?, ?, ?, ?)"; //, ?, ?            preStatement = connection.prepareStatement(saveSql);            for (ShopInfo aShop : aCity.getShopList())            {                for (Dish aDish : aShop.getDishList())                {                    preStatement.setInt(1, aDish.getDishId());                    preStatement.setInt(2, aShop.getShopId());                    preStatement.setString(3, aDish.getDishName());                    preStatement.setString(4, aDish.getDishPicPath());                    preStatement.setString(5, aDish.getDishMiddlePicPath());                    preStatement.setInt(6, aDish.getIsRecommendDish());                    //preStatement.setString(6, aDish.getDishSmallPicPath());                    //preStatement.setString(7, aDish.getDishMiddlePicPath());                    //preStatement.setString(8, aDish.getDishLargePicPath());                    if (preStatement.executeUpdate() < 0)                    {                        throw new Exception("保存数据错误!");                    }                    System.out.println(" 更新数据库 菜肴ID: " + aDish.getDishId() + "\t菜名: " + aDish.getDishName());                    preStatement.clearParameters();                }            }        }        catch (Exception ex)        {            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        return;    }    /*****************************************************************************    Function Name: DataBaseHelper.saveFantongLogosToMySQL          Author: Yangzheng     Description: 将logo数据更新到数据库           Input: City aCity          Output: NONE          Return: NONE         Caution:    --------------------------------------------------------------------------          Date          Author             Description       2013/2/27       Yangzheng         Created Function    *****************************************************************************/    public void saveFantongLogosToMySQL(City aCity)    {        Connection connection = null;        PreparedStatement preStatement = null;        String table = "shop_f_" + aCity.getCityId();        try        {            logger.entry();            // 建立到数据库的链接            connection = getConnection();            // 设置建表语句            String updateSql = "update " + table + " set logo_path = ? where shop_id = ?";            preStatement = connection.prepareStatement(updateSql);            for (ShopInfo aShop : aCity.getShopList())            {                preStatement.setString(1, aShop.getShopLogoPath());                preStatement.setInt(2, aShop.getShopId());                if (preStatement.executeUpdate() < 0)                {                    logger.error("更新商户logo失败");                    throw new Exception("保存数据错误!");                }                System.out.println("更新商户ID: " + aShop.getShopId() + "的Logo.\n路径为: " + aShop.getShopLogoPath());                preStatement.clearParameters();            }        }        catch (Exception ex)        {            logger.error("更新商户logo错误" + ex);            ex.printStackTrace();        }        finally        {            closeConnAndStatement(connection, preStatement);        }        logger.exit();        return;    }}